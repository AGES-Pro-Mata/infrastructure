name: Pro-Mata Deployment Trigger

on:
  repository_dispatch:
    types: [deploy, docker-hub-auto-deploy]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      backend_image_tag:
        description: 'Backend image tag'
        required: true
        default: 'latest'
      frontend_image_tag:
        description: 'Frontend image tag'
        required: true
        default: 'latest'
      force_infrastructure_update:
        description: 'Force infrastructure update'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      backend_image_tag: ${{ steps.env.outputs.backend_image_tag }}
      frontend_image_tag: ${{ steps.env.outputs.frontend_image_tag }}
      cloud_provider: ${{ steps.env.outputs.cloud_provider }}
      trigger_source: ${{ steps.env.outputs.trigger_source }}
      updated_image: ${{ steps.env.outputs.updated_image }}
    
    steps:
      - name: Determine Environment and Tags
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "backend_image_tag=${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_OUTPUT
            echo "frontend_image_tag=${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.action }}" = "deploy" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "backend_image_tag=${{ github.event.client_payload.backend_tag }}" >> $GITHUB_OUTPUT
            echo "frontend_image_tag=${{ github.event.client_payload.frontend_tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.action }}" = "deploy-prod" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "backend_image_tag=${{ github.event.client_payload.backend_tag }}" >> $GITHUB_OUTPUT
            echo "frontend_image_tag=${{ github.event.client_payload.frontend_tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.action }}" = "docker-hub-auto-deploy" ]; then
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
            echo "backend_image_tag=${{ github.event.client_payload.backend_tag }}" >> $GITHUB_OUTPUT
            echo "frontend_image_tag=${{ github.event.client_payload.frontend_tag }}" >> $GITHUB_OUTPUT
            # Add deployment metadata for tracking
            echo "trigger_source=${{ github.event.client_payload.trigger_source }}" >> $GITHUB_OUTPUT
            echo "updated_image=${{ github.event.client_payload.updated_image }}" >> $GITHUB_OUTPUT
          fi
          
          # Set cloud provider based on environment
          if [ "$(echo $GITHUB_OUTPUT | grep environment= | cut -d= -f2)" = "dev" ]; then
            echo "cloud_provider=azure" >> $GITHUB_OUTPUT
          else
            echo "cloud_provider=aws" >> $GITHUB_OUTPUT
          fi

  check-images:
    needs: determine-environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Verify Backend Image Exists
        run: |
          echo "Checking backend image: ${{ env.DOCKER_REGISTRY }}/norohim/pro-mata-backend-dev:${{ needs.determine-environment.outputs.backend_image_tag }}"
          docker manifest inspect ${{ env.DOCKER_REGISTRY }}/norohim/pro-mata-backend-dev:${{ needs.determine-environment.outputs.backend_image_tag }} || {
            echo "Backend image not found. Available tags:"
            curl -s "https://registry.hub.docker.com/v2/repositories/norohim/pro-mata-backend-dev/tags/" | jq -r '.results[].name' | head -10
            exit 1
          }

      - name: Verify Frontend Image Exists
        run: |
          echo "Checking frontend image: ${{ env.DOCKER_REGISTRY }}/norohim/pro-mata-frontend-dev:${{ needs.determine-environment.outputs.frontend_image_tag }}"
          docker manifest inspect ${{ env.DOCKER_REGISTRY }}/norohim/pro-mata-frontend-dev:${{ needs.determine-environment.outputs.frontend_image_tag }} || {
            echo "Frontend image not found. Available tags:"
            curl -s "https://registry.hub.docker.com/v2/repositories/norohim/pro-mata-frontend-dev/tags/" | jq -r '.results[].name' | head -10
            exit 1
          }

  deploy-to-development:
    needs: [determine-environment, check-images]
    if: needs.determine-environment.outputs.environment == 'dev'
    uses: ./.github/workflows/deploy.yml
    with:
      backend_image_tag: ${{ needs.determine-environment.outputs.backend_image_tag }}
      frontend_image_tag: ${{ needs.determine-environment.outputs.frontend_image_tag }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_DEV }}

  deploy-to-production:
    needs: [determine-environment, check-images]
    if: needs.determine-environment.outputs.environment == 'prod'
    uses: ./.github/workflows/deploy-prod.yml
    with:
      backend_image_tag: ${{ needs.determine-environment.outputs.backend_image_tag }}
      frontend_image_tag: ${{ needs.determine-environment.outputs.frontend_image_tag }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_PROD }}

  rollback-on-failure:
    needs: [deploy-to-development, deploy-to-production, determine-environment]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Rollback Development
        if: needs.deploy-to-development.result == 'failure'
        run: |
          echo "Rolling back development deployment..."
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh --environment dev --provider azure

      - name: Rollback Production  
        if: needs.deploy-to-production.result == 'failure'
        run: |
          echo "Rolling back production deployment..."
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh --environment prod --provider aws

  notify-deployment:
    needs: [deploy-to-development, deploy-to-production, determine-environment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Notify Success
        if: needs.deploy-to-development.result == 'success' || needs.deploy-to-production.result == 'success'
        run: |
          echo "Deployment completed successfully!"
          chmod +x scripts/notify-deployment.sh
          
          # Determine notification type
          if [[ "${{ needs.determine-environment.outputs.trigger_source }}" == "docker_hub_webhook" ]]; then
            echo "🤖 Auto-deployment via Docker Hub webhook completed!"
            ./scripts/notify-deployment.sh \
              --status success \
              --environment ${{ needs.determine-environment.outputs.environment }} \
              --backend-tag ${{ needs.determine-environment.outputs.backend_image_tag }} \
              --frontend-tag ${{ needs.determine-environment.outputs.frontend_image_tag }} \
              --trigger-source "docker_hub_webhook" \
              --updated-image "${{ needs.determine-environment.outputs.updated_image }}"
          else
            ./scripts/notify-deployment.sh \
              --status success \
              --environment ${{ needs.determine-environment.outputs.environment }} \
              --backend-tag ${{ needs.determine-environment.outputs.backend_image_tag }} \
              --frontend-tag ${{ needs.determine-environment.outputs.frontend_image_tag }}
          fi

      - name: Notify Failure
        if: needs.deploy-to-development.result == 'failure' || needs.deploy-to-production.result == 'failure'
        run: |
          echo "Deployment failed!"
          chmod +x scripts/notify-deployment.sh
          ./scripts/notify-deployment.sh \
            --status failure \
            --environment ${{ needs.determine-environment.outputs.environment }} \
            --backend-tag ${{ needs.determine-environment.outputs.backend_image_tag }} \
            --frontend-tag ${{ needs.determine-environment.outputs.frontend_image_tag }}

  update-deployment-status:
    needs: [deploy-to-development, deploy-to-production, determine-environment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Update Deployment Status
        run: |
          if [ "${{ needs.deploy-to-development.result }}" = "success" ] || [ "${{ needs.deploy-to-production.result }}" = "success" ]; then
            echo "✅ Deployment completed successfully"
            echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
            echo "Backend: ${{ needs.determine-environment.outputs.backend_image_tag }}"
            echo "Frontend: ${{ needs.determine-environment.outputs.frontend_image_tag }}"
            
            # Add trigger information if available
            if [[ "${{ needs.determine-environment.outputs.trigger_source }}" == "docker_hub_webhook" ]]; then
              echo "🤖 Trigger: Docker Hub webhook (auto-deployment)"
              echo "📦 Updated Image: ${{ needs.determine-environment.outputs.updated_image }}"
            fi
            
            # Update deployment tracking
            curl -X POST "https://api.github.com/repos/${{ github.repository }}/deployments" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "ref": "${{ github.sha }}",
                "environment": "${{ needs.determine-environment.outputs.environment }}",
                "description": "Pro-Mata deployment via CI/CD - '${{ needs.determine-environment.outputs.trigger_source || 'manual' }}'"
              }' || echo "Failed to update deployment status"
          else
            echo "❌ Deployment failed"
            echo "Dev result: ${{ needs.deploy-to-development.result }}"
            echo "Prod result: ${{ needs.deploy-to-production.result }}"
          fi