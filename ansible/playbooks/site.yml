# Main Site Playbook - Pro-Mata Infrastructure
---
- name: Configure Pro-Mata Infrastructure
  hosts: all
  gather_facts: true
  become: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  pre_tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: safe
      tags: [system, update]
    
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /opt/promata
        - /opt/promata/stacks
        - /opt/promata/configs
        - /opt/promata/scripts
        - /opt/promata/logs
        - /opt/promata/data
      tags: [directories]

  roles:
    - role: docker
      tags: [docker]
    
    - role: monitoring
      tags: [monitoring]

  post_tasks:
    - name: Deploy stack files
      include_tasks: tasks/deploy-stacks.yml
      tags: [stacks]
    
    - name: Deploy configuration files
      include_tasks: tasks/ansible_deploy_configs.yml
      tags: [configs]

# Swarm Manager Specific Configuration
- name: Configure Swarm Manager
  hosts: managers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        listen_addr: "{{ ansible_default_ipv4.address }}"
        advertise_addr: "{{ ansible_default_ipv4.address }}"
      register: swarm_info
      tags: [swarm, init]
    
    - name: Get swarm join tokens
      docker_swarm_info:
      register: swarm_facts
      tags: [swarm, tokens]
    
    - name: Set worker join token fact
      set_fact:
        worker_token: "{{ swarm_facts.swarm_facts.JoinTokens.Worker }}"
        manager_token: "{{ swarm_facts.swarm_facts.JoinTokens.Manager }}"
      tags: [swarm, tokens]
    
    - name: Add node labels to manager
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "true"
          database.replica: "false"
          node.type: "manager"
      tags: [swarm, labels]
    
    - name: Create Docker networks
      docker_network:
        name: "{{ item.name }}"
        driver: "{{ item.driver }}"
        attachable: yes
        scope: swarm
      loop:
        - { name: "promata_public", driver: "overlay" }
        - { name: "promata_internal", driver: "overlay" }
        - { name: "promata_database", driver: "overlay" }
      tags: [networks]

# Swarm Workers Configuration
- name: Configure Swarm Workers
  hosts: workers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Join swarm as worker
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token'] }}"
        remote_addrs: "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}:2377"
      tags: [swarm, join]
    
    - name: Add node labels to worker
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "false"
          database.replica: "true"
          node.type: "worker"
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]

# Deploy Pro-Mata Complete Stack
- name: Deploy Pro-Mata Complete Stack
  hosts: managers
  become: true
  gather_facts: false
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Deploy complete Pro-Mata stack
      docker_stack:
        name: "promata-complete"
        compose:
          - /opt/promata/stacks/promata-complete.yml
        state: present
      environment: "{{ stack_environment }}"
      tags: [deploy, complete]
    
    - name: Wait for stack to be ready
      pause:
        seconds: 60
        prompt: "Waiting for stack services to initialize..."
      tags: [deploy, wait]
    
    - name: Check stack health
      shell: docker service ls --filter "label=com.docker.stack.namespace=promata-complete"
      register: stack_status
      tags: [deploy, health]
    
    - name: Display stack status
      debug:
        var: stack_status.stdout_lines
      tags: [deploy, health]
    
    - name: Display deployment summary
      debug:
        msg:
          - "üöÄ Pro-Mata deployment completed!"
          - "üåê Frontend: https://{{ domain_name }}"
          - "üîß API: https://api.{{ domain_name }}"
          - "üìä Traefik: https://traefik.{{ domain_name }}"
          - "üóÑÔ∏è  PgAdmin: https://pgadmin.{{ domain_name }}"
          - "üìà Grafana: https://grafana.{{ domain_name }}"
          - "‚è∞ SSL certificates may take 1-2 minutes to provision"
      tags: [deploy, summary]