name: Deploy Pro-Mata Infrastructure

on:
  repository_dispatch:
    types: 
      # Triggers from Frontend
      - deploy-dev-frontend
      - deploy-prod-frontend
      
      # Triggers from Backend
      - deploy-dev-backend
      - deploy-prod-backend
      
      # Manual triggers
      - deploy-manual
      
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: choice
        options: ['dev', 'prod']
        default: 'dev'
      component:
        description: 'Component to deploy'
        required: false
        type: choice
        options: ['all', 'frontend', 'backend', 'infrastructure']
        default: 'all'
      force_rebuild:
        description: 'Force infrastructure rebuild'
        required: false
        type: boolean
        default: false

env:
  TERRAFORM_VERSION: '1.8.0'
  ANSIBLE_VERSION: '8.5.0'

jobs:
  # Job 1: Determinar ambiente e configurações
  determine-config:
    name: 🔍 Determine Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      cloud_provider: ${{ steps.config.outputs.cloud_provider }}
      backend_image: ${{ steps.config.outputs.backend_image }}
      frontend_image: ${{ steps.config.outputs.frontend_image }}
      triggered_by: ${{ steps.config.outputs.triggered_by }}
      deploy_component: ${{ steps.config.outputs.deploy_component }}
      resource_group: ${{ steps.config.outputs.resource_group }}
      region: ${{ steps.config.outputs.region }}
      
    steps:
      - name: Parse Event and Set Configuration
        id: config
        run: |
          # Determinar ambiente baseado no evento
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
            COMPONENT="${{ github.event.inputs.component }}"
            TRIGGERED_BY="manual"
          else
            # Parse do repository_dispatch
            EVENT_TYPE="${{ github.event.action }}"
            echo "Event type: $EVENT_TYPE"
            
            if [[ "$EVENT_TYPE" == *"dev"* ]]; then
              ENV="dev"
            elif [[ "$EVENT_TYPE" == *"prod"* ]]; then
              ENV="prod"
            else
              ENV="dev" # default
            fi
            
            if [[ "$EVENT_TYPE" == *"frontend"* ]]; then
              COMPONENT="frontend"
              TRIGGERED_BY="frontend"
            elif [[ "$EVENT_TYPE" == *"backend"* ]]; then
              COMPONENT="backend"
              TRIGGERED_BY="backend"
            else
              COMPONENT="all"
              TRIGGERED_BY="manual"
            fi
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "deploy_component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "triggered_by=$TRIGGERED_BY" >> $GITHUB_OUTPUT
          
          # Configurações por ambiente
          if [ "$ENV" = "prod" ]; then
            echo "cloud_provider=aws" >> $GITHUB_OUTPUT
            echo "backend_image=norohim/pro-mata-backend:latest" >> $GITHUB_OUTPUT
            echo "frontend_image=norohim/pro-mata-frontend:latest" >> $GITHUB_OUTPUT
            echo "resource_group=promata-prod-rg" >> $GITHUB_OUTPUT
            echo "region=us-east-1" >> $GITHUB_OUTPUT
          else
            echo "cloud_provider=azure" >> $GITHUB_OUTPUT
            echo "backend_image=norohim/pro-mata-backend-dev:latest" >> $GITHUB_OUTPUT
            echo "frontend_image=norohim/pro-mata-frontend-dev:latest" >> $GITHUB_OUTPUT
            echo "resource_group=promata-dev-rg" >> $GITHUB_OUTPUT
            echo "region=eastus2" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Configuration determined:"
          echo "Environment: $ENV"
          echo "Component: $COMPONENT"
          echo "Triggered by: $TRIGGERED_BY"

  # Job 2: Verificar imagens Docker
  verify-images:
    name: 🔍 Verify Docker Images
    runs-on: ubuntu-latest
    needs: determine-config
    steps:
      - name: Verify Backend Image
        if: contains(needs.determine-config.outputs.deploy_component, 'backend') || needs.determine-config.outputs.deploy_component == 'all'
        run: |
          echo "🐳 Checking backend image: ${{ needs.determine-config.outputs.backend_image }}"
          docker manifest inspect ${{ needs.determine-config.outputs.backend_image }} || {
            echo "❌ Backend image not found!"
            exit 1
          }
          echo "✅ Backend image verified"

      - name: Verify Frontend Image
        if: contains(needs.determine-config.outputs.deploy_component, 'frontend') || needs.determine-config.outputs.deploy_component == 'all'
        run: |
          echo "🐳 Checking frontend image: ${{ needs.determine-config.outputs.frontend_image }}"
          docker manifest inspect ${{ needs.determine-config.outputs.frontend_image }} || {
            echo "❌ Frontend image not found!"
            exit 1
          }
          echo "✅ Frontend image verified"

  # Job 3: Deploy Azure (Dev)
  deploy-azure:
    name: 🌩️ Deploy to Azure (Dev)
    runs-on: ubuntu-latest
    needs: [determine-config, verify-images]
    if: needs.determine-config.outputs.cloud_provider == 'azure'
    
    steps:
      - name: Checkout Infrastructure
        uses: actions/checkout@v4

      - name: Setup Tools
        run: |
          # Install Terraform
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          
          # Install Ansible
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install ansible==${{ env.ANSIBLE_VERSION }}
          
          # Install Make
          sudo apt-get install -y make

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Ansible Vault
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.ansible-vault-password
          chmod 600 ~/.ansible-vault-password
          echo "vault_password_file = ~/.ansible-vault-password" >> ~/.ansible.cfg

      - name: Create Environment File
        run: |
          cat > envs/${{ needs.determine-config.outputs.environment }}/.env.${{ needs.determine-config.outputs.environment }} << EOF
          # Azure Configuration
          AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP=${{ needs.determine-config.outputs.resource_group }}
          AZURE_LOCATION=${{ needs.determine-config.outputs.region }}
          
          # Domain Configuration
          DOMAIN_NAME=${{ needs.determine-config.outputs.environment == 'prod' && 'promata.com.br' || 'promata-dev.com.br' }}
          
          # Application Images
          BACKEND_IMAGE=${{ needs.determine-config.outputs.backend_image }}
          FRONTEND_IMAGE=${{ needs.determine-config.outputs.frontend_image }}
          BACKEND_REPLICAS=${{ needs.determine-config.outputs.environment == 'prod' && '3' || '2' }}
          FRONTEND_REPLICAS=${{ needs.determine-config.outputs.environment == 'prod' && '3' || '2' }}
          
          # Infrastructure
          TF_VAR_ssh_public_key="${{ secrets.SSH_PUBLIC_KEY }}"
          
          # Deployment metadata
          TRIGGERED_BY=${{ needs.determine-config.outputs.triggered_by }}
          DEPLOY_COMPONENT=${{ needs.determine-config.outputs.deploy_component }}
          DEPLOYMENT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

      - name: Deploy Infrastructure
        run: |
          echo "🚀 Starting deployment..."
          echo "Environment: ${{ needs.determine-config.outputs.environment }}"
          echo "Component: ${{ needs.determine-config.outputs.deploy_component }}"
          echo "Triggered by: ${{ needs.determine-config.outputs.triggered_by }}"
          
          # Deploy baseado no componente
          if [ "${{ needs.determine-config.outputs.deploy_component }}" = "all" ] || [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "🏗️ Full infrastructure deployment"
            make deploy-automated ENV=${{ needs.determine-config.outputs.environment }}
          else
            echo "📦 Application-only deployment"
            make stacks-deploy ENV=${{ needs.determine-config.outputs.environment }}
          fi
        timeout-minutes: 45

      - name: Health Checks
        run: |
          echo "🏥 Running health checks..."
          make health ENV=${{ needs.determine-config.outputs.environment }}
        timeout-minutes: 10

  # Job 4: Deploy AWS (Prod)
  deploy-aws:
    name: ☁️ Deploy to AWS (Prod)
    runs-on: ubuntu-latest
    needs: [determine-config, verify-images]
    if: needs.determine-config.outputs.cloud_provider == 'aws'
    
    steps:
      - name: Checkout Infrastructure
        uses: actions/checkout@v4

      - name: Setup Tools
        run: |
          # Install Terraform
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.determine-config.outputs.region }}

      - name: Create Environment File
        run: |
          cat > envs/${{ needs.determine-config.outputs.environment }}/.env.${{ needs.determine-config.outputs.environment }} << EOF
          # AWS Configuration
          AWS_REGION=${{ needs.determine-config.outputs.region }}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          
          # Domain Configuration
          DOMAIN_NAME=promata.com.br
          
          # Application Images
          BACKEND_IMAGE=${{ needs.determine-config.outputs.backend_image }}
          FRONTEND_IMAGE=${{ needs.determine-config.outputs.frontend_image }}
          BACKEND_REPLICAS=3
          FRONTEND_REPLICAS=3
          
          # Deployment metadata
          TRIGGERED_BY=${{ needs.determine-config.outputs.triggered_by }}
          DEPLOY_COMPONENT=${{ needs.determine-config.outputs.deploy_component }}
          DEPLOYMENT_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

      - name: Deploy to ECS
        run: |
          echo "🚀 Deploying to AWS ECS..."
          make deploy-aws ENV=${{ needs.determine-config.outputs.environment }}
        timeout-minutes: 30

  # Job 5: Deployment Summary e Notifications
  deployment-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [determine-config, deploy-azure, deploy-aws]
    if: always()
    
    steps:
      - name: Checkout Infrastructure
        uses: actions/checkout@v4

      - name: Generate Deployment Report
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ needs.determine-config.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cloud Provider** | ${{ needs.determine-config.outputs.cloud_provider }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered By** | ${{ needs.determine-config.outputs.triggered_by }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Component** | ${{ needs.determine-config.outputs.deploy_component }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Backend Image** | ${{ needs.determine-config.outputs.backend_image }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Frontend Image** | ${{ needs.determine-config.outputs.frontend_image }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ (needs.deploy-azure.result == 'success' || needs.deploy-aws.result == 'success') && '✅ SUCCESS' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # URLs de acesso baseadas no ambiente
          if [ "${{ needs.determine-config.outputs.environment }}" = "prod" ]; then
            echo "### 🌐 Production URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: https://promata.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://api.promata.com.br" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔧 Development URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: https://promata-dev.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://api.promata-dev.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **Traefik**: https://traefik.promata-dev.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **PgAdmin**: https://pgadmin.promata-dev.com.br" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify Success
        if: needs.deploy-azure.result == 'success' || needs.deploy-aws.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          
          # Aqui você pode adicionar notificações para Discord/Slack
          # curl -X POST $DISCORD_WEBHOOK -H "Content-Type: application/json" -d '{...}'

      - name: Notify Failure
        if: needs.deploy-azure.result == 'failure' || needs.deploy-aws.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          
          # Notificação de falha
          exit 1

  # Job 6: Rollback em caso de falha
  rollback-on-failure:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    needs: [determine-config, deploy-azure, deploy-aws]
    if: failure()
    
    steps:
      - name: Checkout Infrastructure
        uses: actions/checkout@v4

      - name: Execute Rollback
        run: |
          echo "🚨 Executing emergency rollback..."
          
          if [ "${{ needs.determine-config.outputs.cloud_provider }}" = "azure" ]; then
            echo "Rolling back Azure deployment..."
            make rollback ENV=${{ needs.determine-config.outputs.environment }}
          else
            echo "Rolling back AWS deployment..."
            make rollback-aws ENV=${{ needs.determine-config.outputs.environment }}
          fi