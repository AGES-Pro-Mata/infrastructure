# Pro-Mata Development Complete Stack - CORRIGIDO
# Versão corrigida com todos os problemas do Traefik resolvidos
# Comprehensive development environment with monitoring, analytics, and HA database
version: "3.8"

networks:
  promata_public:
    external: true
  promata_internal:
    external: true
  promata_database:
    external: true

services:

  traefik:
    image: traefik:v3.0
    command:
      # API e Dashboard
      - --api.dashboard=true
      - --api.debug=false
      - --api.insecure=false
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      
      # Providers - CORRIGIDO para Docker Swarm
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.watch=true
      
      # Certificados Let's Encrypt
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@promata.com.br}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      
      # Certificados Let's Encrypt Staging (para testes)
      - --certificatesresolvers.letsencrypt-staging.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt-staging.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt-staging.acme.email=${ACME_EMAIL:-admin@promata.com.br}
      - --certificatesresolvers.letsencrypt-staging.acme.storage=/letsencrypt/acme-staging.json
      - --certificatesresolvers.letsencrypt-staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      
      # Logs e Métricas
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true
      - --accesslog.filepath=/logs/access.log
      - --metrics.prometheus=true
      - --metrics.prometheus.addentrypointslabels=true
      - --metrics.prometheus.addserviceslabels=true
      
      # Segurança
      - --global.sendanonymoususage=false
      - --serversTransport.insecureSkipVerify=false
      
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: host
        
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      
    networks:
      - promata_public
      
    environment:
      - ACME_EMAIL=${ACME_EMAIL:-admin@promata.com.br}
      - TRAEFIK_LOG_LEVEL=${TRAEFIK_LOG_LEVEL:-INFO}
      
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        
        # Middleware para redirects HTTPS
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
        
        # Middleware de segurança - MELHORADO
        - traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.middlewares.security-headers.headers.sslredirect=true
        - traefik.http.middlewares.security-headers.headers.stsseconds=31536000
        - traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true
        - traefik.http.middlewares.security-headers.headers.stspreload=true
        - traefik.http.middlewares.security-headers.headers.forcestshheader=true
        - traefik.http.middlewares.security-headers.headers.contenttypenosniff=true
        - traefik.http.middlewares.security-headers.headers.frameoptions=DENY
        - traefik.http.middlewares.security-headers.headers.referrerpolicy=strict-origin-when-cross-origin
        
        # Middleware de autenticação para dashboard
        - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH_USERS:-admin:$$2y$$10$$placeholder}
        
        # Router global para redirect HTTP -> HTTPS
        - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.http-catchall.entrypoints=web
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        
        # Dashboard do Traefik - CORRIGIDO
        - traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.traefik-dashboard.entrypoints=websecure
        - traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt
        - traefik.http.routers.traefik-dashboard.tls=true
        - traefik.http.routers.traefik-dashboard.middlewares=traefik-auth,security-headers
        - traefik.http.routers.traefik-dashboard.service=api@internal

  # === DATABASE CLUSTER ===
  postgres-primary:
    image: norohim/pro-mata-database-infrastructure:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_ROLE=primary
    networks:
      - promata_database
      - promata_internal
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.2'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 120s

  postgres-replica:
    image: norohim/pro-mata-database-infrastructure:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_ROLE=replica
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_PRIMARY_PORT=5432
    networks:
      - promata_database
      - promata_internal
    depends_on:
      - postgres-primary
    deploy:
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 600M
          cpus: '0.5'
        reservations:
          memory: 384M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s

  # === CONNECTION POOLING ===
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    environment:
      - DATABASES_HOST=postgres-primary
      - DATABASES_PORT=5432
      - DATABASES_USER=${POSTGRES_USER}
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASES_DBNAME=${POSTGRES_DB}
      - POOL_MODE=${PGBOUNCER_POOL_MODE:-session}
      - SERVER_RESET_QUERY=DISCARD ALL
      - MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN:-100}
      - DEFAULT_POOL_SIZE=${PGBOUNCER_POOL_SIZE:-20}
      - RESERVE_POOL_SIZE=5
      - RESERVE_POOL_TIMEOUT=5
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - SERVER_LIFETIME=3600
      - SERVER_IDLE_TIMEOUT=600
      - LISTEN_ADDR=0.0.0.0
      - LISTEN_PORT=6432
      - AUTH_TYPE=md5
      - AUTH_HBA_FILE=
      - AUTH_QUERY=SELECT usename, passwd FROM pg_shadow WHERE usename=$$1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 6432 || exit 1"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 90s
    networks:
      - promata_database
      - promata_internal
    depends_on:
      - postgres-primary
    deploy:
      replicas: ${PGBOUNCER_REPLICAS:-1}
      placement:
        constraints:
          - node.role == manager
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # === APPLICATION SERVICES ===
  frontend:
    image: ${FRONTEND_IMAGE:-norohim/pro-mata-frontend-dev:latest}
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_URL=https://api.${DOMAIN_NAME:-dev.promata.com.br}
      - VITE_APP_ENV=${NODE_ENV:-development}
      - VITE_APP_VERSION=${FRONTEND_VERSION:-latest}
      - VITE_UMAMI_URL=https://analytics.${DOMAIN_NAME}
      - VITE_UMAMI_WEBSITE_ID=${UMAMI_WEBSITE_ID:-}
      - VITE_UMAMI_SCRIPT_URL=${VITE_UMAMI_SCRIPT_URL}
      - VITE_ENABLE_ANALYTICS=true
    networks:
      - promata_public
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      replicas: ${FRONTEND_REPLICAS:-2}
      placement:
        constraints:
          - node.role == manager
        preferences:
          - spread: node.id
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.frontend.entrypoints=websecure
        - traefik.http.routers.frontend.tls.certresolver=letsencrypt
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.middlewares=security-headers
        - traefik.http.services.frontend.loadbalancer.server.port=80
        - traefik.http.services.frontend.loadbalancer.healthcheck.path=/
        - traefik.http.services.frontend.loadbalancer.healthcheck.interval=60s

  backend:
    image: norohim/pro-mata-backend-dev:latest
    stop_grace_period: 60s  
    environment:
      # Configuração básica
      - NODE_ENV=development
      - PORT=3000

      - API_SUBDOMAIN=api 
      
      # Configuração de banco - CORRIGIDA
      # PROBLEMA: JWT_SECRET não estava definido (logs mostram "JWT_SECRET was not setted")
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      
      # Database URL com PgBouncer
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      
      # Configuração alternativa para conexão direta (para debug)
      - DATABASE_HOST=postgres-primary
      - DATABASE_PORT=5432
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      
      # Pool de conexão
      - DATABASE_POOL_MIN=2
      - DATABASE_POOL_MAX=10
      - DATABASE_POOL_IDLE_TIMEOUT=30000
      
      # CORS
      - CORS_ORIGIN=https://${DOMAIN_NAME},https://traefik.${DOMAIN_NAME}
      - CORS_CREDENTIALS=true
      
      # Analytics (opcional)
      - UMAMI_URL=https://analytics.${DOMAIN_NAME}
      - UMAMI_WEBSITE_ID=${UMAMI_WEBSITE_ID:-}
      - UMAMI_API_KEY=${UMAMI_API_KEY:-}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-false}
      
      # Logs e Debug
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DEBUG=${DEBUG:-false}
      
      # Health check
      - HEALTH_CHECK_ENDPOINT=/health
      
    networks:
      - promata_public
      - promata_internal  
      - promata_database
      
    depends_on:
      - pgbouncer

    deploy:
      replicas: ${BACKEND_REPLICAS:-1}
      placement:
        constraints:
          - node.role == manager
        preferences:
          - spread: node.id
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5  
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      resources:
        limits:
          memory: 800M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.2'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        
        # Router principal - REGRAS CORRIGIDAS
        - traefik.http.routers.backend.rule=Host(`api.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.backend.entrypoints=websecure
        - traefik.http.routers.backend.tls.certresolver=letsencrypt
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.middlewares=security-headers
        
        # Service configuration
        - traefik.http.services.backend.loadbalancer.server.port=3000
        - traefik.http.services.backend.loadbalancer.healthcheck.path=/health
        - traefik.http.services.backend.loadbalancer.healthcheck.interval=60s
        - traefik.http.services.backend.loadbalancer.healthcheck.timeout=15s
        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

  # === MONITORING STACK ===
  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.diskstats'
      - '--collector.netdev'
      - '--collector.loadavg'
    volumes:
      - /:/host:ro,rslave
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    networks:
      - promata_internal
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
      labels:
        - prometheus.io/scrape=true
        - prometheus.io/port=9100

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - /opt/promata/configs/prometheus:/etc/prometheus:ro
    networks:
      - promata_internal
      - promata_public
    depends_on:
      - node-exporter
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.prometheus.entrypoints=websecure
        - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
        - traefik.http.routers.prometheus.tls=true
        - traefik.http.routers.prometheus.middlewares=traefik-auth,security-headers
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-dev_grafana_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SERVER_DOMAIN=grafana.${DOMAIN_NAME:-dev.promata.com.br}
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN_NAME:-dev.promata.com.br}
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS:-grafana-piechart-panel}
    volumes:
      - grafana_data:/var/lib/grafana
      - /opt/promata/configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - /opt/promata/configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - promata_internal
      - promata_public
    depends_on:
      - prometheus
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.grafana.entrypoints=websecure
        - traefik.http.routers.grafana.tls.certresolver=letsencrypt
        - traefik.http.routers.grafana.tls=true
        - traefik.http.routers.grafana.middlewares=security-headers
        - traefik.http.services.grafana.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

  # === ANALYTICS ===
  umami-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${UMAMI_DB_NAME}
      - POSTGRES_USER=${UMAMI_DB_USER}
      - POSTGRES_PASSWORD=${UMAMI_DB_PASSWORD}
    volumes:
      - umami_db_data:/var/lib/postgresql/data
    networks:
      - promata_database
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${UMAMI_DB_USER} -d ${UMAMI_DB_NAME}"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 60s

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      - DATABASE_URL=postgresql://${UMAMI_DB_USER}:${UMAMI_DB_PASSWORD}@umami-db:5432/${UMAMI_DB_NAME}
      - DATABASE_TYPE=postgresql
      - APP_SECRET=${UMAMI_APP_SECRET}
      - HOSTNAME=0.0.0.0
      - PORT=3000
    networks:
      - promata_database
      - promata_public
    depends_on:
      - umami-db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.umami.rule=Host(`analytics.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.umami.entrypoints=websecure
        - traefik.http.routers.umami.tls.certresolver=letsencrypt
        - traefik.http.routers.umami.tls=true
        - traefik.http.services.umami.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/heartbeat || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s

  metabase:
    image: metabase/metabase:latest
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${POSTGRES_DB}
      - MB_DB_PORT=6432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=pgbouncer
      - MB_ENCRYPTION_SECRET_KEY=${METABASE_SECRET_KEY:-your-secret-key-change-this}
      - JAVA_OPTS=-Xmx512m
    volumes:
      - metabase_data:/metabase-data
    networks:
      - promata_database
      - promata_public
      - promata_internal
    depends_on:
      - pgbouncer
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.2'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.metabase.rule=Host(`metabase.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.metabase.entrypoints=websecure
        - traefik.http.routers.metabase.tls.certresolver=letsencrypt
        - traefik.http.routers.metabase.tls=true
        - traefik.http.routers.metabase.middlewares=security-headers
        - traefik.http.services.metabase.loadbalancer.server.port=3000

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@promata.com.br}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-dev_admin_password}
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="Pro-Mata Development Environment"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - promata_database
      - promata_public
      - promata_internal
    depends_on:
      - pgbouncer
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
      labels:
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN_NAME:-dev.promata.com.br}`)
        - traefik.http.routers.pgadmin.entrypoints=websecure
        - traefik.http.routers.pgadmin.tls.certresolver=letsencrypt
        - traefik.http.routers.pgadmin.tls=true
        - traefik.http.routers.pgadmin.middlewares=security-headers
        - traefik.http.services.pgadmin.loadbalancer.server.port=80
volumes:
  # PostgreSQL data and config volumes removed to force fresh initialization on each deployment
  # This ensures init scripts in /docker-entrypoint-initdb.d/ always run for development
  traefik_letsencrypt:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  metabase_data:
    driver: local
  pgadmin_data:
    driver: local
  umami_db_data:
    driver: local
