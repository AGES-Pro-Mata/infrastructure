# Complete Docker Swarm Setup for Newly Provisioned VMs
---
- name: Complete Infrastructure Setup - Docker Swarm
  hosts: all
  gather_facts: true
  become: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  pre_tasks:
    - name: Wait for SSH to be available
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: safe
        cache_valid_time: 3600
      tags: [system, update]
    
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /opt/promata
        - /opt/promata/stacks
        - /opt/promata/configs
        - /opt/promata/scripts
        - /opt/promata/logs
        - /opt/promata/data
        - /opt/promata/monitoring
        - /var/log/promata
      tags: [directories]

  roles:
    - role: docker
      tags: [docker]
    
    - role: monitoring
      tags: [monitoring]

# Docker Swarm Manager Setup
- name: Initialize Docker Swarm on Manager
  hosts: managers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Check if swarm is already initialized
      docker_swarm_info:
      register: swarm_info
      ignore_errors: yes
      
    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        listen_addr: "{{ ansible_default_ipv4.address }}"
        advertise_addr: "{{ ansible_default_ipv4.address }}"
      when: swarm_info.failed or (swarm_info.swarm_facts is defined and swarm_info.swarm_facts.LocalNodeState != "active")
      register: swarm_init_result
      tags: [swarm, init]
    
    - name: Get swarm join tokens
      docker_swarm_info:
      register: swarm_facts
      tags: [swarm, tokens]
    
    - name: Set join tokens as facts
      set_fact:
        worker_token: "{{ swarm_facts.swarm_facts.JoinTokens.Worker }}"
        manager_token: "{{ swarm_facts.swarm_facts.JoinTokens.Manager }}"
      tags: [swarm, tokens]
    
    - name: Add labels to manager node
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "true"
          database.replica: "false"
          node.type: "manager"
          traefik.enable: "true"
      tags: [swarm, labels]
    
    - name: Create Docker overlay networks
      docker_network:
        name: "{{ item.name }}"
        driver: "{{ item.driver }}"
        attachable: yes
        scope: swarm
      loop:
        - { name: "promata_public", driver: "overlay" }
        - { name: "promata_internal", driver: "overlay" }
        - { name: "promata_database", driver: "overlay" }
      tags: [networks]

# Docker Swarm Workers Setup
- name: Join Workers to Swarm
  hosts: workers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Check if already part of swarm
      docker_swarm_info:
      register: worker_swarm_info
      ignore_errors: yes
      
    - name: Join swarm as worker
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token'] }}"
        remote_addrs: "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}:2377"
      when: worker_swarm_info.failed or (worker_swarm_info.swarm_facts is defined and worker_swarm_info.swarm_facts.LocalNodeState != "active")
      tags: [swarm, join]
    
    - name: Add labels to worker node
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "false"
          database.replica: "true"
          node.type: "worker"
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]

# Deploy Stack Configurations
- name: Deploy Stack Configurations
  hosts: managers
  become: true
  gather_facts: false
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Wait for swarm to be fully operational
      pause:
        seconds: 30
      tags: [deploy, wait]
    
    - name: Verify swarm nodes
      docker_node:
      register: swarm_nodes
      tags: [deploy, verify]
    
    - name: Display swarm information
      debug:
        msg:
          - "üê≥ Docker Swarm Setup Complete!"
          - "Manager: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})"
          - "Workers: {{ groups['workers'] | length }} nodes"
          - "Networks: promata_public, promata_internal, promata_database"
          - "Ready for stack deployment!"
      tags: [deploy, summary]

    - name: Copy stack files to manager
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - src: ../templates/database-stack.yml.j2
          dest: /opt/promata/stacks/database-stack.yml
        - src: ../templates/app-stack.yml.j2
          dest: /opt/promata/stacks/app-stack.yml
      ignore_errors: yes
      tags: [deploy, stacks]
      
    - name: Create deployment script
      template:
        src: ../templates/deploy-stacks.sh.j2
        dest: /opt/promata/scripts/deploy-stacks.sh
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      ignore_errors: yes
      tags: [deploy, scripts]
