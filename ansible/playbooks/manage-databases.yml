---
- name: Manage Pro-Mata Database Setup
  hosts: managers
  become: true
  vars_files:
    - ../../../envs/dev/.env
  
  tasks:
    - name: Create database setup directory
      file:
        path: /opt/promata/db-scripts
        state: directory
        mode: '0755'

    - name: Copy database initialization script
      copy:
        content: |
          #!/bin/bash
          # Pro-Mata Database Management Script
          set -euo pipefail
          
          # Wait for PostgreSQL to be ready
          wait_for_postgres() {
              local max_attempts=30
              local attempt=0
              
              echo "Waiting for PostgreSQL to be ready..."
              while [[ $attempt -lt $max_attempts ]]; do
                  if docker exec $(docker ps -qf "name=promata-dev_postgres-primary") pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" >/dev/null 2>&1; then
                      echo "PostgreSQL is ready!"
                      return 0
                  fi
                  ((attempt++))
                  echo -n "."
                  sleep 2
              done
              
              echo "PostgreSQL failed to become ready within timeout"
              return 1
          }
          
          # Create dedicated database for Metabase
          create_metabase_database() {
              echo "Creating dedicated Metabase database..."
              
              docker exec $(docker ps -qf "name=promata-dev_postgres-primary") psql -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" -c "
                  DO \$\$
                  BEGIN
                      IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'metabase') THEN
                          CREATE DATABASE metabase OWNER ${POSTGRES_USER};
                          GRANT ALL PRIVILEGES ON DATABASE metabase TO ${POSTGRES_USER};
                      END IF;
                  END
                  \$\$;
              " || {
                  echo "Failed to create Metabase database"
                  return 1
              }
              
              echo "Metabase database created successfully"
          }
          
          # Clean existing Metabase data if needed
          clean_metabase_data() {
              echo "Cleaning existing Metabase data..."
              
              # Drop and recreate Metabase database to clean schema
              docker exec $(docker ps -qf "name=promata-dev_postgres-primary") psql -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" -c "
                  DROP DATABASE IF EXISTS metabase;
                  CREATE DATABASE metabase OWNER ${POSTGRES_USER};
                  GRANT ALL PRIVILEGES ON DATABASE metabase TO ${POSTGRES_USER};
              " || {
                  echo "Failed to clean Metabase database"
                  return 1
              }
              
              echo "Metabase database cleaned successfully"
          }
          
          # Main execution
          main() {
              case "${1:-setup}" in
                  "setup")
                      wait_for_postgres
                      create_metabase_database
                      ;;
                  "clean")
                      wait_for_postgres
                      clean_metabase_data
                      ;;
                  "reset")
                      wait_for_postgres
                      clean_metabase_data
                      ;;
                  *)
                      echo "Usage: $0 [setup|clean|reset]"
                      exit 1
                      ;;
              esac
          }
          
          # Load environment variables
          if [[ -f "/opt/promata/.env" ]]; then
              set -a
              source /opt/promata/.env
              set +a
          else
              echo "Environment file not found: /opt/promata/.env"
              exit 1
          fi
          
          main "$@"
        dest: /opt/promata/db-scripts/manage-databases.sh
        mode: '0755'

    - name: Setup databases
      shell: |
        cd /opt/promata/db-scripts
        ./manage-databases.sh setup
      register: db_setup_result
      failed_when: db_setup_result.rc != 0

    - name: Display database setup result
      debug:
        var: db_setup_result.stdout_lines
