# Pro-Mata Multi-Node Docker Swarm Deployment Playbook
# Supports N managers + N workers configuration
---
- name: Pro-Mata Docker Swarm Multi-Node Setup
  hosts: all
  gather_facts: true
  become: true
  serial: 1  # Process nodes one at a time to ensure proper swarm setup
  
  vars:
    # Docker Configuration
    docker_packages:
      - docker.io
      - docker-compose-plugin
      - docker-buildx-plugin
    
    # Swarm Configuration
    swarm_port: 2377
    docker_api_port: 2376
    
    # Directory Structure
    promata_directories:
      - /opt/promata
      - /opt/promata/stacks
      - /opt/promata/configs
      - /opt/promata/scripts
      - /opt/promata/backups
      - /opt/promata/logs
      - /var/log/promata
    
    # Network Configuration for Swarm
    swarm_networks:
      - name: database_tier
        driver: overlay
        internal: true
        attachable: false
      - name: app_tier  
        driver: overlay
        internal: true
        attachable: false
      - name: proxy_tier
        driver: overlay
        attachable: false
      - name: monitoring_tier
        driver: overlay
        internal: true
        attachable: false
    
    # Node Labels Configuration
    node_labels:
      manager:
        - "database.primary=true"
        - "monitoring.enabled=true"
        - "backup.enabled=true"
      worker:
        - "database.replica=true"
        - "app.enabled=true"

  pre_tasks:
    - name: Validate node configuration
      fail:
        msg: "node_role must be defined as 'manager' or 'worker'"
      when: node_role is not defined or node_role not in ['manager', 'worker']
      tags: [validation]
    
    - name: Validate private_ip configuration
      fail:
        msg: "private_ip must be defined for Swarm communication"
      when: private_ip is not defined
      tags: [validation]
    
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: safe
        cache_valid_time: 3600
      tags: [system]
    
    - name: Install system dependencies
      apt:
        name:
          - curl
          - wget
          - gnupg
          - lsb-release
          - ca-certificates
          - software-properties-common
          - net-tools
          - htop
          - iotop
          - jq
        state: present
      tags: [system]
    
    - name: Create promata directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop: "{{ promata_directories }}"
      tags: [directories]
    
    - name: Create Docker daemon configuration directory
      file:
        path: /etc/docker
        state: directory
        mode: '0755'
      tags: [docker]

  tasks:
    # ============= DOCKER INSTALLATION =============
    - name: Remove old Docker packages
      apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
      tags: [docker]
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      tags: [docker]
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      tags: [docker]
    
    - name: Install Docker packages
      apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: yes
      tags: [docker]
    
    - name: Configure Docker daemon for Swarm
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "5"
            },
            "live-restore": true,
            "userland-proxy": false,
            "experimental": false,
            "metrics-addr": "0.0.0.0:9323",
            "features": {
              "buildkit": true
            },
            "default-address-pools": [
              {
                "base": "172.20.0.0/16",
                "size": 24
              }
            ]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
        backup: yes
      notify: restart docker
      tags: [docker]
    
    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started
        daemon_reload: yes
      tags: [docker]
    
    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      tags: [docker]
    
    - name: Verify Docker installation
      command: docker version
      register: docker_version
      tags: [docker, verify]
    
    - name: Display Docker version
      debug:
        msg: "Docker installed successfully: {{ docker_version.stdout_lines[0] }}"
      tags: [docker, verify]

    # ============= DOCKER SWARM INITIALIZATION =============
    - name: Check if Swarm is already initialized
      command: docker info --format "{{ '{{' }}.Swarm.LocalNodeState{{ '}}' }}"
      register: swarm_status
      ignore_errors: yes
      tags: [swarm]
    
    - name: Initialize Docker Swarm (Manager only)
      docker_swarm:
        state: present
        advertise_addr: "{{ private_ip }}"
        listen_addr: "0.0.0.0:{{ swarm_port }}"
        default_addr_pool:
          - "172.20.0.0/16"
        subnet_size: 24
      register: swarm_info
      when: 
        - node_role == 'manager'
        - swarm_status.stdout != "active"
      tags: [swarm]
    
    - name: Save manager info for workers
      set_fact:
        swarm_manager_ip: "{{ private_ip }}"
        swarm_worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
      when: 
        - node_role == 'manager'
        - swarm_info is defined
        - swarm_info.changed
      tags: [swarm]
    
    - name: Wait for Swarm to be ready on manager
      pause:
        seconds: 10
      when: node_role == 'manager'
      tags: [swarm]

    # ============= WORKER NODE JOINING =============  
    - name: Get Swarm join token from manager
      command: docker swarm join-token worker -q
      register: worker_token
      when: node_role == 'manager'
      delegate_to: "{{ groups['managers'][0] }}"
      run_once: true
      tags: [swarm]
    
    - name: Get manager IP for workers
      set_fact:
        swarm_manager_ip: "{{ hostvars[groups['managers'][0]]['private_ip'] }}"
      when: node_role == 'worker'
      tags: [swarm]
    
    - name: Join worker nodes to Swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ private_ip }}"
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
        remote_addrs: "{{ swarm_manager_ip }}:{{ swarm_port }}"
      when: 
        - node_role == 'worker'
        - swarm_status.stdout != "active"
      tags: [swarm]

    # ============= NODE LABELING =============
    - name: Apply manager node labels
      docker_node:
        hostname: "{{ inventory_hostname }}"
        labels: "{{ node_labels.manager | map('split', '=') | list | items2dict }}"
      when: node_role == 'manager'
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]
    
    - name: Apply worker node labels
      docker_node:
        hostname: "{{ inventory_hostname }}"
        labels: "{{ node_labels.worker | map('split', '=') | list | items2dict }}"
      when: node_role == 'worker'
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]

    # ============= NETWORK CREATION =============
    - name: Create Swarm overlay networks
      docker_network:
        name: "{{ item.name }}"
        driver: "{{ item.driver }}"
        scope: swarm
        internal: "{{ item.internal | default(false) }}"
        attachable: "{{ item.attachable | default(true) }}"
      loop: "{{ swarm_networks }}"
      when: node_role == 'manager'
      run_once: true
      tags: [swarm, networks]

    # ============= SECRETS MANAGEMENT =============
    - name: Create Docker secrets
      docker_secret:
        name: "{{ item.name }}"
        data: "{{ item.value }}"
        state: present
      loop:
        - name: postgres_password
          value: "{{ postgres_password }}"
        - name: postgres_replica_password
          value: "{{ postgres_replica_password }}"
        - name: jwt_secret
          value: "{{ jwt_secret }}"
        - name: grafana_admin_password
          value: "{{ grafana_admin_password }}"
        - name: traefik_auth_users
          value: "{{ traefik_auth_users }}"
      when: node_role == 'manager'
      run_once: true
      no_log: true
      tags: [swarm, secrets]

    # ============= STACK DEPLOYMENT =============
    - name: Copy Pro-Mata complete stack file
      template:
        src: promata-complete-stack.yml.j2
        dest: /opt/promata/stacks/promata-complete.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        backup: yes
      when: node_role == 'manager'
      tags: [stack]
    
    - name: Create stack environment file
      template:
        src: stack.env.j2
        dest: /opt/promata/.env
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        backup: yes
      when: node_role == 'manager'
      tags: [stack]
    
    - name: Deploy Pro-Mata stack
      docker_stack:
        name: promata
        compose: /opt/promata/stacks/promata-complete.yml
        state: present
      environment: "{{ stack_environment }}"
      when: node_role == 'manager'
      run_once: true
      tags: [stack, deploy]
    
    - name: Wait for stack deployment to complete
      pause:
        seconds: 60
      when: node_role == 'manager'
      run_once: true
      tags: [stack, deploy]

    # ============= MONITORING SETUP =============
    - name: Setup monitoring scripts
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "{{ item.mode }}"
      loop:
        - src: swarm-health-check.sh.j2
          dest: /opt/promata/scripts/swarm-health-check.sh
          mode: '0755'
        - src: backup-database.sh.j2
          dest: /opt/promata/scripts/backup-database.sh
          mode: '0755'
        - src: cleanup-docker.sh.j2
          dest: /opt/promata/scripts/cleanup-docker.sh
          mode: '0755'
      tags: [monitoring]
    
    - name: Setup monitoring cron jobs (Manager only)
      cron:
        name: "{{ item.name }}"
        job: "{{ item.job }}"
        minute: "{{ item.minute }}"
        hour: "{{ item.hour }}"
        user: "{{ ansible_user }}"
      loop:
        - name: "Pro-Mata Health Check"
          job: "/opt/promata/scripts/swarm-health-check.sh > /var/log/promata/health-check.log 2>&1"
          minute: "*/5"
          hour: "*"
        - name: "Pro-Mata Database Backup"
          job: "/opt/promata/scripts/backup-database.sh daily > /var/log/promata/backup.log 2>&1"
          minute: "0"
          hour: "2"
        - name: "Docker System Cleanup"
          job: "/opt/promata/scripts/cleanup-docker.sh > /var/log/promata/cleanup.log 2>&1"
          minute: "0"
          hour: "3"
      when: node_role == 'manager'
      tags: [monitoring, cron]

    # ============= VERIFICATION =============
    - name: Verify Swarm cluster status
      command: docker node ls
      register: swarm_nodes
      when: node_role == 'manager'
      run_once: true
      tags: [verify]
    
    - name: Verify stack services
      command: docker service ls
      register: stack_services
      when: node_role == 'manager'
      run_once: true
      tags: [verify]
    
    - name: Display cluster status
      debug:
        msg:
          - "🎉 Pro-Mata Swarm Cluster deployed successfully!"
          - "📊 Cluster Nodes:"
          - "{{ swarm_nodes.stdout_lines }}"
          - ""
          - "⚙️ Stack Services:"
          - "{{ stack_services.stdout_lines }}"
          - ""
          - "🌐 Access URLs:"
          - "Frontend: https://{{ domain_name }}"
          - "Backend API: https://api.{{ domain_name }}"
          - "Traefik Dashboard: https://traefik.{{ domain_name }}"
          - "Grafana: https://grafana.{{ domain_name }}"
      when: node_role == 'manager'
      run_once: true
      tags: [verify]

    # ============= FIREWALL CONFIGURATION =============
    - name: Configure UFW for Swarm
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        src: "{{ item.src | default(omit) }}"
      loop:
        # Docker Swarm ports
        - { port: "{{ swarm_port }}", proto: tcp, src: "{{ swarm_cidr | default(omit) }}" }
        - { port: "7946", proto: tcp, src: "{{ swarm_cidr | default(omit) }}" }
        - { port: "7946", proto: udp, src: "{{ swarm_cidr | default(omit) }}" }
        - { port: "4789", proto: udp, src: "{{ swarm_cidr | default(omit) }}" }
        # Application ports
        - { port: "80", proto: tcp }
        - { port: "443", proto: tcp }
        # SSH
        - { port: "22", proto: tcp }
      tags: [firewall]
    
    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
        direction: incoming
      tags: [firewall]

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes