# Analytics Stack - Umami & Metabase for Pro-Mata Development
version: "3.8"

services:
  # Umami Analytics for website tracking
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      - DATABASE_URL=postgresql://umami:${UMAMI_DB_PASSWORD:-umami}@umami-db:5432/umami
      - DATABASE_TYPE=postgresql
      - HASH_SALT=${UMAMI_HASH_SALT}
      - HOSTNAME=0.0.0.0
    networks:
      - promata_analytics
      - promata_public
    depends_on:
      - umami-db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.umami.rule=Host(`analytics.${DOMAIN_NAME}`)
        - traefik.http.routers.umami.entrypoints=websecure
        - traefik.http.routers.umami.tls.certresolver=letsencrypt
        - traefik.http.services.umami.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Umami Database
  umami-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=umami
      - POSTGRES_USER=umami
      - POSTGRES_PASSWORD=${UMAMI_DB_PASSWORD:-umami}
    volumes:
      - umami_data:/var/lib/postgresql/data
    networks:
      - promata_analytics
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U umami -d umami"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Metabase for data visualization and business intelligence
  metabase:
    image: metabase/metabase:latest
    environment:
      # Use external PostgreSQL for Metabase metadata
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=${POSTGRES_DB}
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=pgbouncer  # Connect through pgbouncer for connection pooling
      - JAVA_OPTS=-Xmx1g -XX:+ExitOnOutOfMemoryError
      # Security settings
      - MB_PASSWORD_COMPLEXITY=strong
      - MB_PASSWORD_LENGTH=12
    volumes:
      - metabase_data:/metabase-data
    networks:
      - promata_analytics
      - promata_database  # Access to main database
      - promata_public
    depends_on:
      - umami  # Can analyze umami data too
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.metabase.rule=Host(`bi.${DOMAIN_NAME}`)
        - traefik.http.routers.metabase.entrypoints=websecure
        - traefik.http.routers.metabase.tls.certresolver=letsencrypt
        - traefik.http.services.metabase.loadbalancer.server.port=3000
        - traefik.http.routers.metabase.middlewares=auth
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # Metabase takes longer to start

volumes:
  umami_data:
    driver: local
  metabase_data:
    driver: local

networks:
  promata_analytics:
    external: true
  promata_database:
    external: true
  promata_public:
    external: true