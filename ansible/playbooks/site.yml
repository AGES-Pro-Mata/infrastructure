# Main Site Playbook - Pro-Mata Infrastructure
---
- name: Configure Pro-Mata Infrastructure
  hosts: all
  become: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  pre_tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: safe
      tags: [system, update]
    
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /opt/promata
        - /opt/promata/stacks
        - /opt/promata/configs
        - /opt/promata/scripts
        - /opt/promata/logs
        - /opt/promata/data
      tags: [directories]

  roles:
    - role: docker
      tags: [docker]
    
    - role: monitoring
      tags: [monitoring]

  post_tasks:
    - name: Deploy configuration files
      include_tasks: tasks/ansible_deploy_configs.yml
      tags: [configs]

# Swarm Manager Specific Configuration
- name: Configure Swarm Manager
  hosts: managers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Check if node is already part of a Swarm
      docker_swarm_info:
      register: swarm_info

    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ private_ip }}"
      when: not swarm_info.docker_swarm_active

    - name: Get Swarm join tokens from manager
      docker_swarm_info:
      register: swarm_info_tokens
    
    - name: Add node labels to manager
      command: docker node update --label-add database.primary=true --label-add database.replica=false --label-add node.type=manager {{ ansible_hostname }}
      tags: [swarm, labels]
    
    - name: Create Docker networks
      command: docker network create --driver overlay --attachable {{ item.name }}
      loop:
        - { name: "promata_public" }
        - { name: "promata_internal" }
        - { name: "promata_database" }
      register: network_create
      changed_when: network_create.rc == 0
      failed_when: network_create.rc != 0 and 'already exists' not in network_create.stderr
      tags: [networks]
    
    - name: Deploy stack files (manager only)
      include_tasks: tasks/deploy-stacks.yml
      tags: [stacks]

# Swarm Workers Configuration
- name: Configure Swarm Workers
  hosts: workers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Get Swarm join tokens from manager
      docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ groups['managers'][0] }}"
      run_once: true

    - name: Check if worker is already in a swarm
      docker_swarm_info:
      register: worker_swarm_info

    - name: Join workers to Swarm
      docker_swarm:
        state: present
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
        remote_addrs:
          - "{{ hostvars[groups['managers'][0]]['private_ip'] }}:2377"
      when: not worker_swarm_info.docker_swarm_active
    
    - name: Wait for worker node to be available in swarm
      shell: docker node ls --format "{{ '{{' }}.Hostname{{ '}}' }}" | grep -q "{{ ansible_hostname }}"
      register: node_check
      until: node_check.rc == 0
      retries: 15
      delay: 2
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]
    
    - name: Add node labels to worker
      command: docker node update --label-add database.primary=false --label-add database.replica=true --label-add node.type=worker {{ ansible_hostname }}
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]

# Deploy Pro-Mata Complete Stack
- name: Deploy Pro-Mata Complete Stack
  hosts: managers
  become: true
  gather_facts: false
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Deploy complete Pro-Mata stack
      command: docker stack deploy --compose-file /opt/promata/stacks/promata-complete.yml promata-complete
      environment: "{{ stack_environment }}"
      register: stack_deploy
      changed_when: stack_deploy.rc == 0
      tags: [deploy, complete]
    
    - name: Wait for stack to be ready
      pause:
        seconds: 60
        prompt: "Waiting for stack services to initialize..."
      tags: [deploy, wait]
    
    - name: Check stack health
      shell: docker service ls --filter "label=com.docker.stack.namespace=promata-complete"
      register: stack_status
      tags: [deploy, health]
    
    - name: Display stack status
      debug:
        var: stack_status.stdout_lines
      tags: [deploy, health]
    
    - name: Display deployment summary
      debug:
        msg:
          - "üöÄ Pro-Mata deployment completed!"
          - "üåê Frontend: https://{{ domain_name }}"
          - "üîß API: https://api.{{ domain_name }}"
          - "üìä Traefik: https://traefik.{{ domain_name }}"
          - "üóÑÔ∏è  PgAdmin: https://pgadmin.{{ domain_name }}"
          - "üìà Grafana: https://grafana.{{ domain_name }}"
          - "‚è∞ SSL certificates may take 1-2 minutes to provision"
      tags: [deploy, summary]