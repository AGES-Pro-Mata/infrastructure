# Complete Docker Swarm Setup for Newly Provisioned VMs
---
- name: Complete Infrastructure Setup - Docker Swarm
  hosts: all
  gather_facts: true
  become: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  pre_tasks:
    - name: Wait for SSH to be available
      wait_for_connection:
        delay: 10
        timeout: 300
      
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: safe
        cache_valid_time: 3600
      tags: [system, update]
    
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - /opt/promata
        - /opt/promata/stacks
        - /opt/promata/configs
        - /opt/promata/scripts
        - /opt/promata/logs
        - /opt/promata/data
        - /opt/promata/monitoring
        - /var/log/promata
      tags: [directories]

  roles:
    - role: docker
      tags: [docker]
    
    - role: monitoring
      tags: [monitoring]

# Docker Swarm Manager Setup
- name: Initialize Docker Swarm on Manager
  hosts: managers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Check if swarm is already initialized
      docker_swarm_info:
      register: swarm_info
      ignore_errors: yes
      
    - name: Initialize Docker Swarm
      docker_swarm:
        state: present
        listen_addr: "{{ ansible_default_ipv4.address }}"
        advertise_addr: "{{ ansible_default_ipv4.address }}"
      when: not (swarm_info.docker_swarm_active | default(false))
      register: swarm_init_result
      tags: [swarm, init]
    
    - name: Get swarm join tokens
      docker_swarm_info:
      register: swarm_facts
      tags: [swarm, tokens]
    
    - name: Set join tokens as facts
      set_fact:
        worker_token: "{{ swarm_facts.swarm_facts.JoinTokens.Worker }}"
        manager_token: "{{ swarm_facts.swarm_facts.JoinTokens.Manager }}"
      tags: [swarm, tokens]
    
    - name: Add labels to manager node
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "true"
          database.replica: "false"
          node.type: "manager"
          traefik.enable: "true"
      tags: [swarm, labels]
    
    - name: Create Docker overlay networks
      docker_network:
        name: "{{ item.name }}"
        driver: "{{ item.driver }}"
        attachable: yes
        scope: swarm
      loop:
        - { name: "promata_public", driver: "overlay" }
        - { name: "promata_internal", driver: "overlay" }
        - { name: "promata_database", driver: "overlay" }
      tags: [networks]

# Docker Swarm Workers Setup
- name: Join Workers to Swarm
  hosts: workers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Check if already part of swarm
      docker_swarm_info:
      register: worker_swarm_info
      ignore_errors: yes
      
    - name: Join swarm as worker
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['managers'][0]]['worker_token'] }}"
        remote_addrs: "{{ hostvars[groups['managers'][0]]['ansible_default_ipv4']['address'] }}:2377"
      when: not (worker_swarm_info.docker_swarm_active | default(false))
      tags: [swarm, join]
    
    - name: Add labels to worker node
      docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          database.primary: "false"
          database.replica: "true"
          node.type: "worker"
      delegate_to: "{{ groups['managers'][0] }}"
      tags: [swarm, labels]

# Deploy Stack Configurations
- name: Deploy Stack Configurations
  hosts: managers
  become: true
  gather_facts: true
  
  vars_files:
    - "../inventory/{{ env | default('dev') }}/group_vars/all.yml"
  
  tasks:
    - name: Wait for swarm to be fully operational
      pause:
        seconds: 30
      tags: [deploy, wait]
    
    - name: Verify swarm nodes
      shell: docker node ls
      register: swarm_nodes
      tags: [deploy, verify]
    
    - name: Display swarm information
      debug:
        msg:
          - "==> Docker Swarm Setup Complete!"
          - "Manager: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})"
          - "Workers: {{ groups['workers'] | length }} nodes"
          - "Networks: promata_public, promata_internal, promata_database"
          - "Ready for stack deployment!"
      tags: [deploy, summary]

    - name: Create environment file
      template:
        src: ../templates/stack.env.j2
        dest: /opt/promata/.env
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      tags: [deploy, env]

    - name: Copy stack files to manager
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - src: ../templates/proxy-stack.yml.j2
          dest: /opt/promata/stacks/proxy-stack.yml
        - src: ../templates/database-stack.yml.j2
          dest: /opt/promata/stacks/database-stack.yml
        - src: ../templates/app-stack.yml.j2
          dest: /opt/promata/stacks/app-stack.yml
      tags: [deploy, stacks]
      
    - name: Create deployment script
      template:
        src: ../templates/deploy-stacks.sh.j2
        dest: /opt/promata/scripts/deploy-stacks.sh
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      tags: [deploy, scripts]

    - name: Create stack management scripts
      copy:
        content: |
          #!/bin/bash
          # Pro-Mata Stack Management Script
          
          case "$1" in
            status)
              echo "==> Docker Stack Status:"
              docker stack ls
              echo ""
              echo "==> Services Status:"
              docker service ls
              ;;
            logs)
              SERVICE="${2:-}"
              if [ -z "$SERVICE" ]; then
                echo "Usage: promata-logs <service-name>"
                echo "Available services:"
                docker service ls --format "table {{'{{'}}.Name{{'}}'}}"
              else
                docker service logs -f "$SERVICE"
              fi
              ;;
            deploy)
              echo "==> Starting deployment..."
              /opt/promata/scripts/deploy-stacks.sh
              ;;
            remove)
              echo "==> Removing all stacks..."
              docker stack rm promata-app promata-database promata-proxy
              ;;
            *)
              echo "Usage: $0 {status|logs|deploy|remove}"
              echo "  status  - Show stack and services status"
              echo "  logs    - Show logs for a service"
              echo "  deploy  - Deploy all stacks"
              echo "  remove  - Remove all stacks"
              ;;
          esac
        dest: /usr/local/bin/promata
        mode: '0755'
      tags: [deploy, scripts]

    - name: Deploy Traefik proxy stack
      docker_stack:
        name: "promata-proxy"
        compose:
          - /opt/promata/stacks/proxy-stack.yml
        state: present
      environment:
        DOMAIN_NAME: "{{ domain_name }}"
        TRAEFIK_LOG_LEVEL: "{{ traefik_log_level }}"
        TRAEFIK_API_DASHBOARD: "{{ traefik_api_dashboard }}"
        ACME_EMAIL: "{{ acme_email }}"
        TRAEFIK_AUTH_USERS: "{{ traefik_auth_users }}"
      tags: [deploy, proxy]

    - name: Wait for Traefik to be ready
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:8080/ping"
        method: GET
        timeout: 30
      register: traefik_health
      until: traefik_health.status == 200
      retries: 20
      delay: 15
      tags: [deploy, proxy, health]

    - name: Deploy database stack
      docker_stack:
        name: "promata-database"
        compose:
          - /opt/promata/stacks/database-stack.yml
        state: present
      environment:
        POSTGRES_DB: "{{ postgres_db }}"
        POSTGRES_USER: "{{ postgres_user }}"
        POSTGRES_PASSWORD: "{{ postgres_password }}"
        POSTGRES_REPLICA_USER: "{{ postgres_replica_user }}"
        POSTGRES_REPLICA_PASSWORD: "{{ postgres_replica_password }}"
        PGBOUNCER_POOL_MODE: "{{ pgbouncer_pool_mode }}"
        PGBOUNCER_POOL_SIZE: "{{ pgbouncer_pool_size }}"
        PGBOUNCER_MAX_CLIENT_CONN: "{{ pgbouncer_max_client_conn }}"
        PGADMIN_EMAIL: "{{ pgadmin_email }}"
        PGADMIN_PASSWORD: "{{ pgadmin_password }}"
        JWT_SECRET: "{{ jwt_secret }}"
        DOMAIN_NAME: "{{ domain_name }}"
      tags: [deploy, database]

    - name: Wait for database to be ready
      wait_for:
        port: 5432
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 300
        delay: 30
      tags: [deploy, database, health]

    - name: Deploy application stack
      docker_stack:
        name: "promata-app"
        compose:
          - /opt/promata/stacks/app-stack.yml
        state: present
      environment:
        BACKEND_IMAGE: "{{ backend_image }}"
        FRONTEND_IMAGE: "{{ frontend_image }}"
        BACKEND_REPLICAS: "{{ backend_replicas }}"
        FRONTEND_REPLICAS: "{{ frontend_replicas }}"
        POSTGRES_DB: "{{ postgres_db }}"
        POSTGRES_USER: "{{ postgres_user }}"
        POSTGRES_PASSWORD: "{{ postgres_password }}"
        JWT_SECRET: "{{ jwt_secret }}"
        JWT_EXPIRES_IN: "{{ jwt_expires_in }}"
        DOMAIN_NAME: "{{ domain_name }}"
        ENVIRONMENT: "{{ env_name }}"
      tags: [deploy, app]
      
    - name: Final deployment summary
      debug:
        msg:
          - "==> Pro-Mata deployment completed successfully!"
          - ""
          - "==> Services deployed:"
          - "  * Traefik Proxy (Load Balancer + SSL)"
          - "  * PostgreSQL Database with PgBouncer"
          - "  * Redis Cache"
          - "  * Backend API ({{ backend_replicas }} replicas)"
          - "  * Frontend App ({{ frontend_replicas }} replicas)"
          - ""
          - "==> Access URLs:"
          - "  Frontend: https://{{ domain_name }}"
          - "  API:      https://api.{{ domain_name }}"
          - "  Traefik:  https://traefik.{{ domain_name }}"
          - "  DB Admin: https://db.{{ domain_name }}"
          - ""
          - "==> Management:"
          - "  Status:   promata status"
          - "  Logs:     promata logs <service>"
          - "  Deploy:   promata deploy"
          - ""
          - "==> Note: SSL certificates may take 1-2 minutes to provision"
          - "==> Configure Cloudflare DNS to point to: {{ ansible_default_ipv4.address }}"
      tags: [deploy, summary]
