name: Pro-Mata Security Pipeline

# INFORMATIVE MODE: Este pipeline executa verificações de segurança como informativas
# Issues de segurança são reportados como warnings, mas não bloqueiam o pipeline
# Apenas falhas estruturais críticas causam falha no workflow

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  schedule:
    # Execução diária às 2h (UTC)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para executar testes de segurança'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      scan_type:
        description: 'Tipo de scan de segurança'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - containers
          - images
          - dependencies
          - network
          - infrastructure
      force_rotation:
        description: 'Forçar rotação de secrets'
        required: false
        default: false
        type: boolean

env:
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'dev' }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # Job 1: Validação inicial e testes básicos
  validate:
    name: 🔍 Validação de Segurança
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      should_deploy: ${{ steps.setup.outputs.should_deploy }}
      
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🔧 Setup ambiente
        id: setup
        run: |
          # Determinar ambiente baseado no branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          # Override com input manual se disponível
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi
          
      - name: 🛠️ Instalar dependências de segurança
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl openssl
          
          # Instalar Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install -y terraform
          
          # Instalar Ansible
          sudo apt install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible
          
          # Instalar Trivy para scan de containers
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
      - name: 🧪 Executar testes de segurança básicos
        continue-on-error: true
        run: |
          chmod +x scripts/security/*.sh
          EXIT_CODE=0
          ./scripts/security/security-scan.sh --environment ${{ steps.setup.outputs.environment }} --type dependencies --ci-mode || EXIT_CODE=$?
          
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "::warning::Testes básicos de segurança encontraram issues - continuando como informativo"
            echo "basic_security_issues=true" >> $GITHUB_ENV
          else
            echo "::notice::Testes básicos de segurança passaram"
          fi
          
      - name: 📊 Validar estrutura de arquivos
        run: |
          echo "🔍 Verificando estrutura de arquivos de segurança..."
          
          required_files=(
            "scripts/security/security-scan.sh"
            "scripts/security/security-audit.sh"
            "scripts/security/security-monitor.sh"
            "scripts/security/rotate-secrets.sh"
            "scripts/setup/init-security.sh"
            "Makefile"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "::error::Arquivos de segurança ausentes: ${missing_files[*]}"
            exit 1
          fi
          
          echo "✅ Estrutura de arquivos validada"

  # Job 2: Scan de vulnerabilidades
  security_scan:
    name: 🔐 Scan de Segurança
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30
    
    strategy:
      matrix:
        scan_type: [dependencies, containers, network]
      fail-fast: false
      
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      # Node.js setup removido - este é um projeto de infraestrutura, não Node.js
          
      - name: 🛠️ Instalar dependências
        run: |
          sudo apt-get update
          
          # Remover conflitos de Docker se existirem
          sudo apt-get remove -y containerd || true
          sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
          
          # Instalar dependências básicas
          sudo apt-get install -y jq curl openssl
          
          # Instalar Docker oficial para evitar conflitos
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          
          # Instalar ferramentas específicas por tipo de scan
          if [[ "${{ matrix.scan_type }}" == "containers" ]]; then
            # Instalar Trivy
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install -y trivy
          elif [[ "${{ matrix.scan_type }}" == "dependencies" ]]; then
            # Instalar Safety para Python
            pip3 install safety
          fi
          
      # Dependências Node.js removidas - este é um projeto de infraestrutura, não Node.js
          
      - name: 🔍 Executar scan de segurança
        continue-on-error: true
        run: |
          chmod +x scripts/security/security-scan.sh
          
          scan_type="${{ matrix.scan_type }}"
          if [[ "${{ github.event.inputs.scan_type }}" != "" ]] && [[ "${{ github.event.inputs.scan_type }}" != "all" ]]; then
            scan_type="${{ github.event.inputs.scan_type }}"
          fi
          
          EXIT_CODE=0
          ./scripts/security/security-scan.sh \
            --environment ${{ needs.validate.outputs.environment }} \
            --type "$scan_type" \
            --format sarif \
            --ci-mode || EXIT_CODE=$?
            
          # Tratar vulnerabilidades como informativas
          if [[ $EXIT_CODE -eq 1 ]]; then
            echo "::warning::Vulnerabilidades encontradas no scan de $scan_type, mas continuando pipeline como informativo"
            echo "security_issues=true" >> $GITHUB_ENV
          elif [[ $EXIT_CODE -gt 1 ]]; then
            echo "::error::Erro crítico no scan de segurança para $scan_type"
            echo "security_critical=true" >> $GITHUB_ENV
          else
            echo "::notice::Scan de segurança $scan_type executado com sucesso"
          fi
            
      - name: 📤 Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/security-scan/security-scan-results.sarif
          category: "security-${{ matrix.scan_type }}"
        continue-on-error: true
        
      - name: 📊 Upload scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.scan_type }}-${{ needs.validate.outputs.environment }}
          path: |
            reports/security-scan/
            logs/security-scan-*.log
          retention-days: 30

  # Job 3: Auditoria de conformidade
  security_audit:
    name: 📋 Auditoria de Segurança  
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🛠️ Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl openssl
          
      - name: 🔍 Executar auditoria de segurança
        continue-on-error: true
        run: |
          chmod +x scripts/security/security-audit.sh
          EXIT_CODE=0
          ./scripts/security/security-audit.sh --compliance-check --environment ${{ needs.validate.outputs.environment }} --format json || EXIT_CODE=$?
          
          # Exit codes: 0=success, 1=high findings, 2=critical findings - tratar como informativo
          if [[ $EXIT_CODE -eq 2 ]]; then
            echo "::warning::Achados CRÍTICOS de segurança detectados - pipeline continuando como informativo"
            echo "security_findings=critical" >> $GITHUB_ENV
          elif [[ $EXIT_CODE -eq 1 ]]; then
            echo "::warning::Achados de segurança ALTOS detectados - pipeline continuando como informativo"
            echo "security_findings=high" >> $GITHUB_ENV
          else
            echo "::notice::Auditoria de segurança passou com sucesso"
          fi
            
      - name: 📊 Gerar relatório de auditoria
        if: always()
        run: |
          chmod +x scripts/security/security-audit.sh
          ./scripts/security/security-audit.sh \
            --generate-report \
            --format html \
            --environment ${{ needs.validate.outputs.environment }}
            
      - name: 📤 Upload relatórios de auditoria
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ needs.validate.outputs.environment }}
          path: |
            reports/security/
            logs/security-audit-*.log
          retention-days: 30

  # Job 4: Testes de integração de segurança
  integration_tests:
    name: 🧪 Testes de Integração
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🛠️ Setup ambiente de teste
        run: |
          sudo apt-get update
          
          # Remover conflitos de Docker se existirem
          sudo apt-get remove -y containerd || true
          sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
          
          # Instalar dependências básicas
          sudo apt-get install -y jq curl openssl
          
          # Instalar Docker oficial para evitar conflitos
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          
          # Inicializar sistema de segurança para testes
          chmod +x scripts/setup/*.sh scripts/security/*.sh scripts/utils/*.sh
          ./scripts/setup/init-security.sh --environment dev --skip-deps
          
      - name: 🧪 Executar testes de integração
        continue-on-error: true
        run: |
          EXIT_CODE=0
          ./scripts/utils/test-security.sh \
            --environment dev \
            --type integration \
            --verbose || EXIT_CODE=$?
            
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "::warning::Testes de integração falharam - continuando como informativo"
            echo "integration_test_issues=true" >> $GITHUB_ENV
          else
            echo "::notice::Testes de integração passaram"
          fi
            
      - name: 🧪 Executar testes end-to-end
        continue-on-error: true
        run: |
          EXIT_CODE=0
          ./scripts/utils/test-security.sh \
            --environment dev \
            --type e2e \
            --verbose || EXIT_CODE=$?
            
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "::warning::Testes end-to-end falharam - continuando como informativo"
            echo "e2e_test_issues=true" >> $GITHUB_ENV
          else
            echo "::notice::Testes end-to-end passaram"
          fi
            
      - name: 📊 Upload resultados dos testes
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            logs/security-tests-*.log
          retention-days: 30

  # Job 5: Rotação de secrets (apenas em branches principais)
  secret_rotation:
    name: 🔄 Rotação de Secrets
    runs-on: ubuntu-latest
    needs: [validate, security_scan, security_audit]
    if: |
      (needs.validate.outputs.should_deploy == 'true' || github.event.inputs.force_rotation == 'true') &&
      (github.event_name == 'schedule' || github.event.inputs.force_rotation == 'true')
    timeout-minutes: 15
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Cloud CLI
        run: |
          # Setup baseado no ambiente
          if [[ "${{ needs.validate.outputs.environment }}" == "prod" ]]; then
            # Setup AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -o awscliv2.zip || true
            sudo ./aws/install
          else
            # Setup Azure CLI
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi
          
      - name: 🔐 Configurar credenciais cloud
        run: |
          if [[ "${{ needs.validate.outputs.environment }}" == "prod" ]]; then
            # Configurar AWS
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region us-east-1
          else
            # Configurar Azure
            az login --service-principal \
              -u ${{ secrets.AZURE_CLIENT_ID }} \
              -p ${{ secrets.AZURE_CLIENT_SECRET }} \
              --tenant ${{ secrets.AZURE_TENANT_ID }}
          fi
          
      - name: 🔄 Executar rotação de secrets
        run: |
          chmod +x scripts/security/rotate-secrets.sh
          
          # Rotação baseada em agenda ou forçada
          if [[ "${{ github.event.inputs.force_rotation }}" == "true" ]]; then
            ./scripts/security/rotate-secrets.sh \
              --environment ${{ needs.validate.outputs.environment }} \
              --force \
              rotate-all
          else
            # Rotação seletiva baseada em políticas
            ./scripts/security/rotate-secrets.sh \
              --environment ${{ needs.validate.outputs.environment }} \
              rotate-db
          fi

  # Job 6: Backup de segurança
  security_backup:
    name: 💾 Backup de Segurança
    runs-on: ubuntu-latest
    needs: [validate, security_scan, security_audit]
    if: github.event_name == 'schedule' || needs.validate.outputs.should_deploy == 'true'
    timeout-minutes: 10
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        
      - name: 💾 Executar backup
        run: |
          chmod +x scripts/backup/backup-recovery.sh
          ./scripts/backup/backup-recovery.sh \
            backup \
            --environment ${{ needs.validate.outputs.environment }} \
            --type full
            
      - name: 📤 Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: security-backup-${{ needs.validate.outputs.environment }}-${{ github.run_number }}
          path: backups/
          retention-days: 90

  # Job 7: Notificações
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [validate, security_scan, security_audit, integration_tests]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Determinar status geral
        id: status
        run: |
          # Verificar status dos jobs anteriores
          validate_status="${{ needs.validate.result }}"
          scan_status="${{ needs.security_scan.result }}"
          audit_status="${{ needs.security_audit.result }}"
          tests_status="${{ needs.integration_tests.result }}"
          
          # Com continue-on-error, jobs com falhas serão marcados como "success"
          # Verificamos envs para issues de segurança
          has_security_issues=false
          
          # Verificar se algum job foi cancelado
          if [[ "$validate_status" == "cancelled" ]] || [[ "$scan_status" == "cancelled" ]] || [[ "$audit_status" == "cancelled" ]] || [[ "$tests_status" == "cancelled" ]]; then
            echo "overall_status=cancelled" >> $GITHUB_OUTPUT
            echo "status_emoji=⏹️" >> $GITHUB_OUTPUT
            echo "status_color=7506394" >> $GITHUB_OUTPUT
          # Verificar falhas reais (não de continue-on-error)
          elif [[ "$validate_status" == "failure" ]]; then
            echo "overall_status=failure" >> $GITHUB_OUTPUT
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "status_color=15158332" >> $GITHUB_OUTPUT
          else
            # Pipeline executou com sucesso (issues de segurança são informativos)
            echo "overall_status=success_with_warnings" >> $GITHUB_OUTPUT
            echo "status_emoji=⚠️" >> $GITHUB_OUTPUT
            echo "status_color=16776960" >> $GITHUB_OUTPUT
          fi
          
      - name: 📢 Enviar notificação Discord
        if: env.DISCORD_WEBHOOK_URL != ''
        uses: Ilshidur/action-discord@master
        with:
          args: '${{ steps.status.outputs.status_emoji }} Pro-Mata Security Pipeline - Status: ${{ steps.status.outputs.overall_status }}'
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK_URL }}
          DISCORD_EMBEDS: |
            [{
              "title": "${{ steps.status.outputs.status_emoji }} Pro-Mata Security Pipeline",
              "description": "Pipeline de segurança executado para ambiente **${{ needs.validate.outputs.environment }}**",
              "color": ${{ steps.status.outputs.status_color }},
              "fields": [
                {
                  "name": "Status",
                  "value": "${{ steps.status.outputs.overall_status }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": true
                },
                {
                  "name": "Validação",
                  "value": "${{ needs.validate.result == 'success' && '✅' || needs.validate.result == 'failure' && '❌' || '⏹️' }}",
                  "inline": true
                },
                {
                  "name": "Scan",
                  "value": "${{ needs.security_scan.result == 'success' && '✅' || needs.security_scan.result == 'failure' && '❌' || '⏹️' }}",
                  "inline": true
                },
                {
                  "name": "Auditoria",
                  "value": "${{ needs.security_audit.result == 'success' && '✅' || needs.security_audit.result == 'failure' && '❌' || '⏹️' }}",
                  "inline": true
                }
              ],
              "timestamp": "${{ github.event.head_commit.timestamp }}",
              "footer": {
                "text": "Pro-Mata Security System"
              }
            }]
            
      - name: 🧹 Executar limpeza
        run: |
          # Verificar se o script existe e dar permissão
          if [[ -f "scripts/backup/backup-recovery.sh" ]]; then
            chmod +x scripts/backup/backup-recovery.sh
            # Limpar backups antigos (manter últimos 10)
            ./scripts/backup/backup-recovery.sh cleanup --retention 10
          else
            echo "⚠️ Script de backup não encontrado, pulando limpeza"
          fi
          
      - name: 📊 Estatísticas do pipeline
        run: |
          echo "## 📊 Estatísticas do Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Evento**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.notify.outputs.overall_status || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duração**: ${{ github.event.head_commit.timestamp }}" >> $GITHUB_STEP_SUMMARY