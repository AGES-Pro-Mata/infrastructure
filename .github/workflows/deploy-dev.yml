name: Deploy to Development Environment

on:
  workflow_call:
    inputs:
      backend_image_tag:
        required: true
        type: string
      frontend_image_tag:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: development
    outputs:
      manager_ip: ${{ steps.terraform.outputs.manager_ip }}
      
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Setup Azure CLI
        uses: azure/setup-cli@v1

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create environment file if not exists
        working-directory: ./terraform/azure
        run: |
          if [ ! -f "../../environments/dev/.env.dev" ]; then
            echo "Creating default environment file..."
            mkdir -p ../../environments/dev
            cat > ../../environments/dev/.env.dev << EOF
            # Pro-Mata Development Environment Variables
            # Generated by CI/CD Pipeline
            environment = "dev"
            location = "East US 2"
            backend_image_tag = "${{ inputs.backend_image_tag }}"
            frontend_image_tag = "${{ inputs.frontend_image_tag }}"
            EOF
          fi
          
          # Update image tags in environment file
          sed -i "s/backend_image_tag = .*/backend_image_tag = \"${{ inputs.backend_image_tag }}\"/" ../../environments/dev/.env.dev
          sed -i "s/frontend_image_tag = .*/frontend_image_tag = \"${{ inputs.frontend_image_tag }}\"/" ../../environments/dev/.env.dev

      - name: Terraform Init and Plan
        id: terraform
        working-directory: ./terraform/azure
        run: |
          terraform init
          terraform plan -var-file="../../environments/dev/.env.dev" -out=tfplan
          
          # Apply terraform
          terraform apply -auto-approve tfplan
          
          # Get outputs
          MANAGER_IP=$(terraform output -raw swarm_manager_public_ip 2>/dev/null || echo "")
          echo "manager_ip=$MANAGER_IP" >> $GITHUB_OUTPUT
          
          if [ -n "$MANAGER_IP" ]; then
            echo "Swarm manager IP: $MANAGER_IP"
          else
            echo "Warning: Could not get manager IP from Terraform output"
          fi

      - name: Save Terraform State
        working-directory: ./terraform/azure
        run: |
          chmod +x ../../scripts/save-terraform-state.sh
          ../../scripts/save-terraform-state.sh --provider azure --action save --storage azure --environment dev
        continue-on-error: true

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Create Ansible requirements if not exists
        run: |
          if [ ! -f "ansible/requirements.yml" ]; then
            echo "Creating Ansible requirements file..."
            mkdir -p ansible
            cat > ansible/requirements.yml << EOF
          ---
          collections:
            - name: community.docker
              version: ">=3.0.0"
            - name: ansible.posix
              version: ">=1.4.0"

          roles:
            - name: geerlingguy.docker
              version: "7.0.2"
            - name: geerlingguy.pip
              version: "2.2.0"
          EOF
          fi

      - name: Create static inventory if not exists
        run: |
          if [ ! -f "static_ip.ini" ]; then
            echo "Creating static inventory file..."
            MANAGER_IP="${{ needs.deploy-infrastructure.outputs.manager_ip }}"
            
            if [ -z "$MANAGER_IP" ]; then
              echo "Error: Manager IP not available from infrastructure deployment"
              exit 1
            fi
            
            cat > static_ip.ini << EOF
          [dev_managers]
          dev-manager-01 ansible_host=$MANAGER_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa

          [all:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF
          else
            # Update existing inventory with new IP
            MANAGER_IP="${{ needs.deploy-infrastructure.outputs.manager_ip }}"
            if [ -n "$MANAGER_IP" ]; then
              sed -i "s/ansible_host=.* /ansible_host=$MANAGER_IP /" static_ip.ini
            fi
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add manager IP to known hosts if available
          MANAGER_IP="${{ needs.deploy-infrastructure.outputs.manager_ip }}"
          if [ -n "$MANAGER_IP" ]; then
            ssh-keyscan -H $MANAGER_IP >> ~/.ssh/known_hosts 2>/dev/null || echo "Could not add manager IP to known_hosts"
          fi

      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-pip
          
          # Install requirements if they exist
          if [ -f "ansible/requirements.yml" ]; then
            ansible-galaxy install -r ansible/requirements.yml
          fi

      - name: Wait for VM to be ready
        run: |
          echo "Waiting for VM to complete initialization..."
          sleep 60
          
          MANAGER_IP="${{ needs.deploy-infrastructure.outputs.manager_ip }}"
          if [ -n "$MANAGER_IP" ]; then
            # Wait for SSH to be available
            for i in {1..10}; do
              if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$MANAGER_IP "echo 'SSH Ready'" 2>/dev/null; then
                echo "SSH connection established"
                break
              fi
              echo "Waiting for SSH... (attempt $i/10)"
              sleep 30
            done
          fi

      - name: Deploy with Ansible
        env:
          BACKEND_IMAGE_TAG: ${{ inputs.backend_image_tag }}
          FRONTEND_IMAGE_TAG: ${{ inputs.frontend_image_tag }}
        run: |
          # Check if we have the required playbook structure
          if [ ! -d "deployment/ansible" ] && [ ! -d "ansible/playbooks" ]; then
            echo "Creating basic deployment structure..."
            mkdir -p ansible/playbooks
            
            # Create a basic deployment playbook
            cat > ansible/playbooks/deploy.yml << EOF
          ---
          - name: Deploy Pro-Mata to Docker Swarm
            hosts: dev_managers
            become: yes
            vars:
              backend_image_tag: "${{ inputs.backend_image_tag }}"
              frontend_image_tag: "${{ inputs.frontend_image_tag }}"
              environment: "dev"
            
            tasks:
              - name: Ensure Docker is installed
                apt:
                  name: docker.io
                  state: present
                  
              - name: Start Docker service
                systemd:
                  name: docker
                  state: started
                  enabled: yes
                  
              - name: Initialize Docker Swarm
                docker_swarm:
                  state: present
                ignore_errors: yes
                
              - name: Login to Docker registry
                docker_login:
                  username: "${{ secrets.DOCKER_USERNAME }}"
                  password: "${{ secrets.DOCKER_PASSWORD }}"
                  
              - name: Deploy backend service
                docker_swarm_service:
                  name: pro-mata-backend
                  image: "norohim/pro-mata-backend:{{ backend_image_tag }}"
                  replicas: 1
                  publish:
                    - "3000:3000"
                  env:
                    NODE_ENV: development
                    
              - name: Deploy frontend service  
                docker_swarm_service:
                  name: pro-mata-frontend
                  image: "norohim/pro-mata-frontend:{{ frontend_image_tag }}"
                  replicas: 1
                  publish:
                    - "80:80"
          EOF
          fi
          
          # Run the deployment
          if [ -d "deployment/ansible" ]; then
            cd deployment/ansible
            ansible-playbook -i ../../static_ip.ini \
              -e "backend_image_tag=$BACKEND_IMAGE_