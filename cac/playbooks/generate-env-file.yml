---
- name: Generate Environment File for Pro-Mata Stack
  hosts: managers
  become: true
  
  tasks:
    - name: Create Pro-Mata directory
      file:
        path: /opt/promata
        state: directory
        mode: '0755'

    - name: Generate .env file with all required variables
      copy:
        content: |
          # Pro-Mata Development Environment Configuration
          # Auto-generated by Ansible - {{ ansible_date_time.iso8601 }}
          
          # Environment Settings
          export environment="{{ stack_environment.environment }}"
          export project_name="{{ stack_environment.project_name }}"
          export env_color="{{ stack_environment.env_color }}"
          
          # Domain Configuration
          export domain_name="promata.com.br"
          export DOMAIN_NAME="promata.com.br"
          export ACME_EMAIL="admin@promata.com.br"
          
          # Infrastructure
          export MANAGER_IP="135.119.195.249"
          
          # Database Configuration
          export POSTGRES_DB="{{ stack_environment.POSTGRES_DB }}"
          export POSTGRES_USER="{{ stack_environment.POSTGRES_USER }}"
          export POSTGRES_PASSWORD="{{ stack_environment.POSTGRES_PASSWORD }}"
          
          # Application Security
          export JWT_SECRET="{{ stack_environment.JWT_SECRET }}"
          export JWT_EXPIRES_IN="{{ stack_environment.JWT_EXPIRES_IN }}"
          
          # Traefik Configuration
          export TRAEFIK_LOG_LEVEL="{{ stack_environment.TRAEFIK_LOG_LEVEL }}"
          export TRAEFIK_AUTH_USERS="{{ stack_environment.TRAEFIK_AUTH_USERS }}"
          
          # Cloudflare Configuration
          export CLOUDFLARE_API_TOKEN="{{ stack_environment.CLOUDFLARE_API_TOKEN }}"
          export CLOUDFLARE_ZONE_ID="{{ stack_environment.CLOUDFLARE_ZONE_ID }}"
          
          # Application Images
          export BACKEND_IMAGE="{{ stack_environment.BACKEND_IMAGE }}"
          export FRONTEND_IMAGE="{{ stack_environment.FRONTEND_IMAGE }}"
          export DATABASE_IMAGE="{{ stack_environment.DATABASE_IMAGE }}"
          
          # Monitoring & Tools
          export GRAFANA_ADMIN_PASSWORD="{{ stack_environment.GRAFANA_ADMIN_PASSWORD }}"
          export PGADMIN_EMAIL="{{ stack_environment.PGADMIN_EMAIL }}"
          export PGADMIN_PASSWORD="{{ stack_environment.PGADMIN_PASSWORD }}"
          export PROMETHEUS_RETENTION="{{ stack_environment.PROMETHEUS_RETENTION }}"
          
          # PgBouncer Configuration
          export PGBOUNCER_POOL_MODE="{{ stack_environment.PGBOUNCER_POOL_MODE }}"
          export PGBOUNCER_POOL_SIZE="{{ stack_environment.PGBOUNCER_POOL_SIZE }}"
          export PGBOUNCER_MAX_CLIENT_CONN="{{ stack_environment.PGBOUNCER_MAX_CLIENT_CONN }}"
          export PGBOUNCER_AUTH_TYPE="{{ stack_environment.PGBOUNCER_AUTH_TYPE }}"
          
          # Analytics - Umami
          export UMAMI_DB_PASSWORD="{{ stack_environment.UMAMI_DB_PASSWORD }}"
          export UMAMI_WEBSITE_ID="{{ stack_environment.UMAMI_WEBSITE_ID }}"
          export UMAMI_HASH_SALT="{{ stack_environment.UMAMI_HASH_SALT }}"
          export UMAMI_SECRET="{{ stack_environment.UMAMI_SECRET }}"
          
          # Metabase Configuration
          export METABASE_DB_PASSWORD="{{ stack_environment.METABASE_DB_PASSWORD }}"
          
          # Backup Configuration
          export BACKUP_ENCRYPTION_KEY="{{ stack_environment.BACKUP_ENCRYPTION_KEY }}"
        dest: /opt/promata/.env
        mode: '0600'
        backup: yes

    - name: Update check-variables.sh to handle export prefix
      replace:
        path: /opt/promata/check-variables.sh
        regexp: 'grep -q "\^${var}="'
        replace: 'grep -q "^export ${var}=\|^${var}="'
      ignore_errors: true

    - name: Source environment variables and verify
      shell: |
        cd /opt/promata
        source .env
        echo "✓ Domain: $domain_name"
        echo "✓ Database User: $POSTGRES_USER"
        echo "✓ JWT Secret: ${JWT_SECRET:0:20}..."
        echo "✓ Traefik Auth: ${TRAEFIK_AUTH_USERS:0:30}..."
      register: env_verification

    - name: Show environment verification
      debug:
        var: env_verification.stdout_lines

    - name: Test check-variables.sh script if it exists
      shell: |
        cd /opt/promata
        if [ -f check-variables.sh ]; then
          chmod +x check-variables.sh
          ./check-variables.sh
        else
          echo "check-variables.sh not found, but environment is ready"
        fi
      register: script_test
      ignore_errors: true

    - name: Show script test results
      debug:
        var: script_test.stdout_lines
      when: script_test.stdout_lines is defined