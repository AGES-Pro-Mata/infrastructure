# PostgreSQL HA + PgBouncer Stack - Pro-Mata Infrastructure

version: "3.8"

services:
  # Database Initialization with Prisma Migrations (sample)
  db-migrations:
    image: node:18-alpine
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}
    networks:
      - promata_database
    depends_on:
      - postgres-primary
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: none
    command: >
      sh -c "
        apk add --no-cache postgresql-client &&
        npm install -g prisma @prisma/client &&
        cat > prisma/schema.prisma << 'EOF'
        generator client {
          provider = \"prisma-client-js\"
        }
        datasource db {
          provider = \"postgresql\"
          url      = env(\"DATABASE_URL\")
        }
        model User {
          id        Int      @id @default(autoincrement())
          email     String   @unique
          name      String?
          createdAt DateTime @default(now())
          updatedAt DateTime @updatedAt
          posts     Post[]
        }
        model Post {
          id        Int      @id @default(autoincrement())
          title     String
          content   String?
          published Boolean  @default(false)
          author    User     @relation(fields: [authorId], references: [id])
          authorId  Int
          createdAt DateTime @default(now())
          updatedAt DateTime @updatedAt
        }
        EOF
        && mkdir -p prisma
        && prisma generate &&
        prisma db push --accept-data-loss
      "

  # PostgreSQL Primary (Master)
  postgres-primary:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICA_USER:-replicator}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICA_PASSWORD}
      - PGUSER=${POSTGRES_USER}
      
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./configs/postgresql/primary/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./configs/postgresql/primary/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./configs/postgresql/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh
    
    networks:
      - promata_database
    
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.database.primary == true]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL Replica (Standby)
  postgres-replica:
    image: postgres:15-alpine
    environment:
      - PGUSER=${POSTGRES_REPLICA_USER:-replicator}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICA_USER:-replicator}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICA_PASSWORD}
      
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./configs/postgresql/replica/recovery.conf:/var/lib/postgresql/data/recovery.conf
      - ./configs/postgresql/replica/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    
    networks:
      - promata_database
    
    depends_on:
      - postgres-primary
    
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.database.replica == true]
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_REPLICA_USER:-replicator}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  # PgBouncer - Connection Pooling & Load Balancing
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    environment:
      - DATABASES_HOST=postgres-primary
      - DATABASES_PORT=5432
      - DATABASES_USER=${POSTGRES_USER}
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASES_DBNAME=${POSTGRES_DB}
      - POOL_MODE=${PGBOUNCER_POOL_MODE:-session}
      - MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN:-100}
      - DEFAULT_POOL_SIZE=${PGBOUNCER_POOL_SIZE:-20}
      - ADMIN_USERS=${POSTGRES_USER}
      - STATS_USERS=${POSTGRES_USER}
    
    volumes:
      - ./configs/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./configs/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    
    networks:
      - promata_database
      - promata_internal
    
    depends_on:
      - postgres-primary
    
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    
    healthcheck:
      test: ["CMD-SHELL", "psql -h localhost -p 6432 -U ${POSTGRES_USER} -d pgbouncer -c 'SHOW STATS'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Database Administration - PgAdmin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@promata.dev}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./configs/pgadmin/servers.json:/pgadmin4/servers.json
    
    networks:
      - promata_database
      - promata_public
    
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.docker.network=promata_public
        - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN_NAME}`)
        - traefik.http.routers.pgadmin.entrypoints=websecure
        - traefik.http.routers.pgadmin.tls.certresolver=letsencrypt
        - traefik.http.services.pgadmin.loadbalancer.server.port=80
        - traefik.http.routers.pgadmin.middlewares=auth
    
    profiles: ["admin"]

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  promata_database:
    external: true
  promata_internal:
    external: true
  promata_public:
    external: true