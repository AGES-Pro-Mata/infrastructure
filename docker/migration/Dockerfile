# Pro-Mata Database Migration Container
FROM node:20-alpine

WORKDIR /app

# Install required tools
RUN apk add --no-cache postgresql-client openssl libc6-compat netcat-openbsd

# Copy only migration-related files
COPY package*.json ./
COPY prisma ./prisma/

# Install only production dependencies needed for migrations
RUN npm ci --only=production && npm cache clean --force
RUN npx prisma generate

# Migration script
COPY <<'EOF' /app/migrate.sh
#!/bin/sh
set -e

echo "üîÑ Pro-Mata Database Migration Tool"
echo "Environment: ${NODE_ENV:-development}"
echo "Database Host: ${DB_HOST:-postgres-primary}"
echo "Database Port: ${DB_PORT:-5432}"

# Wait for database to be ready
echo "‚è≥ Aguardando PostgreSQL..."
until pg_isready -h ${DB_HOST:-postgres-primary} -p ${DB_PORT:-5432} -U ${POSTGRES_USER:-promata}; do
    echo "   Banco n√£o dispon√≠vel, tentando novamente..."
    sleep 5
done
echo "‚úÖ PostgreSQL dispon√≠vel!"

# Check database connection with Prisma
echo "üîç Verificando conex√£o com Prisma..."
if ! node -e "
const { PrismaClient } = require('@prisma/client');
new PrismaClient().\$connect()
  .then(() => {
    console.log('‚úÖ Prisma conectado com sucesso!');
    process.exit(0);
  })
  .catch(e => {
    console.error('‚ùå Erro na conex√£o Prisma:', e.message);
    process.exit(1);
  })
"; then
    echo "‚ùå Falha na conex√£o com banco via Prisma"
    exit 1
fi

# Create backup if in production
if [ "$NODE_ENV" = "production" ]; then
    echo "üì¶ Criando backup de seguran√ßa..."
    BACKUP_FILE="/tmp/backup-$(date +%Y%m%d-%H%M%S).sql"
    if pg_dump "${DATABASE_URL}" > "$BACKUP_FILE" 2>/dev/null; then
        echo "‚úÖ Backup criado: $BACKUP_FILE"
        # Optionally upload to storage (implement as needed)
    else
        echo "‚ö†Ô∏è  Backup falhou, continuando com migra√ß√µes..."
    fi
fi

# Check migration status
echo "üîç Verificando status das migra√ß√µes..."
if npx prisma migrate status; then
    echo "üìã Status das migra√ß√µes verificado"
else
    echo "‚ö†Ô∏è  Problemas no status das migra√ß√µes, tentando resolver..."
fi

# Deploy migrations
echo "üîÑ Executando migra√ß√µes..."
if npx prisma migrate deploy; then
    echo "‚úÖ Migra√ß√µes executadas com sucesso!"
else
    echo "‚ùå Erro ao executar migra√ß√µes!"
    exit 1
fi

# Seed database if requested
if [ "$RUN_SEED" = "true" ]; then
    echo "üå± Executando seed do banco..."
    if npx prisma db seed; then
        echo "‚úÖ Seed executado com sucesso!"
    else
        echo "‚ö†Ô∏è  Seed n√£o dispon√≠vel ou falhou"
    fi
fi

# Final verification
echo "üè• Verifica√ß√£o final da conectividade..."
if node -e "
const { PrismaClient } = require('@prisma/client');
new PrismaClient().\$connect()
  .then(() => {
    console.log('‚úÖ Verifica√ß√£o final: Conex√£o OK');
    process.exit(0);
  })
  .catch(e => {
    console.error('‚ùå Verifica√ß√£o final falhou:', e.message);
    process.exit(1);
  })
"; then
    echo "‚úÖ Migration container completado com sucesso!"
else
    echo "‚ùå Verifica√ß√£o final falhou!"
    exit 1
fi
EOF

RUN chmod +x /app/migrate.sh

# Health check for init container
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD pg_isready -h ${DB_HOST:-postgres-primary} -p ${DB_PORT:-5432} -U ${POSTGRES_USER:-promata} || exit 1

ENTRYPOINT ["/app/migrate.sh"]