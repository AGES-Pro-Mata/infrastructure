# Deploy Docker Stack Files Task - Pro-Mata Dev Environment
---
- name: Create Pro-Mata directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - /opt/promata/stacks
    - /opt/promata/configs
    - /opt/promata/logs
    - /opt/promata/data

- name: Copy production stack file  
  copy:
    src: "../../docker/stacks/promata-production.yml"
    dest: "/opt/promata/stacks/promata-production.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Generate dev environment file
  template:
    src: dev.env.j2
    dest: /opt/promata/.env
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Deploy Pro-Mata production stack
  shell: |
    cd /opt/promata
    export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
    docker stack deploy -c stacks/promata-production.yml promata-production --with-registry-auth
  register: stack_deploy_result
  
- name: Display stack deployment result
  debug:
    var: stack_deploy_result.stdout_lines
  
- name: Wait for stack services to initialize
  pause:
    seconds: 45
    prompt: "Waiting for Pro-Mata services to initialize..."

- name: Verify stack deployment
  command: docker service ls --filter "label=com.docker.stack.namespace=promata-production" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"
  register: stack_services
  
- name: Display deployed services
  debug:
    var: stack_services.stdout_lines

- name: Check critical services health
  command: docker service ps promata-production_{{ item }} --format "table {{.Name}}\t{{.CurrentState}}\t{{.Error}}" --no-trunc
  register: service_status
  loop:
    - traefik
    - postgres  
    - pgadmin
    - grafana
  ignore_errors: yes

- name: Display critical service health
  debug:
    msg: "{{ item.item }} service status: {{ item.stdout_lines }}"
  loop: "{{ service_status.results }}"
  when: item.stdout_lines is defined
