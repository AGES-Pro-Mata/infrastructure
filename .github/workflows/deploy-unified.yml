name: Pro-Mata Unified Deployment

on:
  # Manual triggers
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: choice
        options: ['dev', 'staging', 'prod']
        default: 'dev'
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: ['deploy', 'health', 'status', 'destroy']
        default: 'deploy'
      force_rebuild:
        description: 'Force infrastructure rebuild'
        required: false
        type: boolean
        default: false

  # Automatic triggers
  push:
    branches: [main, dev]
    paths: 
      - 'envs/**'
      - 'terraform/**'
      - 'ansible/**'
      - 'scripts/**'

  # External triggers (Docker Hub, other repos)
  repository_dispatch:
    types:
      - deploy-dev-frontend
      - deploy-dev-backend
      - docker-hub-auto-deploy
      - deploy-manual

env:
  TERRAFORM_VERSION: '1.8.0'
  ANSIBLE_VERSION: 'latest'

jobs:
  # Determine environment and configuration
  config:
    name: 🔍 Determine Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      action: ${{ steps.config.outputs.action }}
      force_rebuild: ${{ steps.config.outputs.force_rebuild }}
      backend_image: ${{ steps.config.outputs.backend_image }}
      frontend_image: ${{ steps.config.outputs.frontend_image }}
      triggered_by: ${{ steps.config.outputs.triggered_by }}
      
    steps:
      - name: Parse Configuration
        id: config
        run: |
          # Determine environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
            ACTION="${{ github.event.inputs.action }}"
            FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"
            TRIGGERED_BY="manual"
          elif [ "${{ github.event_name }}" = "push" ]; then
            ENV="dev"  # Always deploy to dev for now
            ACTION="deploy"
            FORCE_REBUILD="false"
            TRIGGERED_BY="push_${{ github.ref_name }}"
          else
            # repository_dispatch
            ENV="dev"  # Force dev environment for now
            ACTION="deploy"
            FORCE_REBUILD="false"
            TRIGGERED_BY="${{ github.event.action }}"
          fi
          
          # Set Docker images
          if [[ "${{ github.event.action }}" == "docker-hub-auto-deploy" ]]; then
            BACKEND_IMAGE="${{ github.event.client_payload.backend_image || 'norohim/pro-mata-backend-dev:latest' }}"
            FRONTEND_IMAGE="${{ github.event.client_payload.frontend_image || 'norohim/pro-mata-frontend-dev:latest' }}"
          else
            BACKEND_IMAGE="norohim/pro-mata-backend-dev:latest"
            FRONTEND_IMAGE="norohim/pro-mata-frontend-dev:latest"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "force_rebuild=$FORCE_REBUILD" >> $GITHUB_OUTPUT
          echo "backend_image=$BACKEND_IMAGE" >> $GITHUB_OUTPUT
          echo "frontend_image=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT
          echo "triggered_by=$TRIGGERED_BY" >> $GITHUB_OUTPUT
          
          echo "🎯 Configuration:"
          echo "Environment: $ENV"
          echo "Action: $ACTION"
          echo "Triggered by: $TRIGGERED_BY"

  # Verify Docker images exist
  verify:
    name: 🔍 Verify Images
    runs-on: ubuntu-latest
    needs: config
    if: contains(needs.config.outputs.action, 'deploy')
    
    steps:
      - name: Verify Backend Image
        run: |
          echo "🐳 Verifying backend image: ${{ needs.config.outputs.backend_image }}"
          docker manifest inspect ${{ needs.config.outputs.backend_image }} || {
            echo "❌ Backend image not found!"
            exit 1
          }

      - name: Verify Frontend Image
        run: |
          echo "🐳 Verifying frontend image: ${{ needs.config.outputs.frontend_image }}"
          docker manifest inspect ${{ needs.config.outputs.frontend_image }} || {
            echo "❌ Frontend image not found!"
            exit 1
          }

  # Main deployment job
  deploy:
    name: 🚀 Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [config, verify]
    if: contains(needs.config.outputs.action, 'deploy')
    environment: ${{ needs.config.outputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Tools
        run: |
          # Install Terraform
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip -O terraform.zip
          unzip -o terraform.zip || true
          sudo rm -rf /usr/local/bin/terraform 2>/dev/null || true
          sudo mv terraform /usr/local/bin/
          chmod +x /usr/local/bin/terraform
          
          # Install Ansible and Make
          sudo apt update
          sudo apt install -y software-properties-common make
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install -y ansible

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Ansible Vault
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.ansible-vault-password
          chmod 600 ~/.ansible-vault-password
          echo "vault_password_file = ~/.ansible-vault-password" >> ~/.ansible.cfg

      - name: Create Environment Configuration
        run: |
          # Create terraform.tfvars with secrets
          cat > envs/${{ needs.config.outputs.environment }}/terraform.tfvars << EOF
          # Azure Configuration
          environment = "${{ needs.config.outputs.environment }}"
          project_name = "pro-mata"
          domain_name = "promata.com.br"
          azure_resource_group = "promata-${{ needs.config.outputs.environment }}-rg"
          azure_subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azure_location = "eastus2"
          vm_size = "Standard_B2s"
          
          # Application Images
          backend_image = "${{ needs.config.outputs.backend_image }}"
          frontend_image = "${{ needs.config.outputs.frontend_image }}"
          migration_image = "norohim/pro-mata-migration-${{ needs.config.outputs.environment }}:latest"
          
          # Replicas
          backend_replicas = 1
          frontend_replicas = 1
          
          # Database
          postgres_db = "promata_${{ needs.config.outputs.environment }}"
          postgres_user = "promata"
          
          # Cloudflare (optional)
          cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN || 'null' }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID || 'null' }}"
          enable_cloudflare_dns = false
          
          # Storage
          storage_account_name = "promata${{ needs.config.outputs.environment }}stg$(date +%s | tail -c 6)"
          EOF

      - name: Execute Deployment
        run: |
          case "${{ needs.config.outputs.action }}" in
            "deploy")
              if [ "${{ needs.config.outputs.force_rebuild }}" = "true" ]; then
                echo "🏗️ Full infrastructure rebuild"
                make deploy-automated ENV=${{ needs.config.outputs.environment }}
              else
                echo "📦 Standard deployment"
                make deploy-automated ENV=${{ needs.config.outputs.environment }}
              fi
              ;;
            "health")
              make health ENV=${{ needs.config.outputs.environment }}
              ;;
            "status")
              make status ENV=${{ needs.config.outputs.environment }}
              ;;
          esac
        timeout-minutes: 45

      - name: Extract SSH Key
        if: contains(needs.config.outputs.action, 'deploy')
        run: |
          mkdir -p ~/.ssh
          cd terraform/deployments/${{ needs.config.outputs.environment }}
          terraform output -raw ssh_private_key > ~/.ssh/promata_key
          chmod 600 ~/.ssh/promata_key
          echo "SSH key extracted"

      - name: Health Check
        if: contains(needs.config.outputs.action, 'deploy')
        run: |
          make health ENV=${{ needs.config.outputs.environment }}
        timeout-minutes: 10

  # Destroy job (separate for safety)
  destroy:
    name: 💥 Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: config
    if: contains(needs.config.outputs.action, 'destroy')
    environment: ${{ needs.config.outputs.environment }}-destroy
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip -O terraform.zip
          unzip -o terraform.zip || true
          sudo mv terraform /usr/local/bin/
          chmod +x /usr/local/bin/terraform

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Destroy Infrastructure
        run: |
          make destroy-${{ needs.config.outputs.environment }}

  # Summary and notifications
  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [config, deploy, destroy]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ needs.config.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Action** | ${{ needs.config.outputs.action }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered By** | ${{ needs.config.outputs.triggered_by }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Backend Image** | ${{ needs.config.outputs.backend_image }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Frontend Image** | ${{ needs.config.outputs.frontend_image }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ (needs.deploy.result == 'success' || needs.destroy.result == 'success') && '✅ SUCCESS' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.config.outputs.environment }}" = "dev" ]; then
            echo "### 🔧 Development URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: https://dev.promata.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://api.dev.promata.com.br" >> $GITHUB_STEP_SUMMARY
            echo "- **Traefik**: https://traefik.dev.promata.com.br" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify Discord
        if: always()
        run: |
          # Add Discord notification logic here
          echo "Would notify Discord about deployment status"
